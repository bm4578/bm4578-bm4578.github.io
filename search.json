[{"title":"Hexo博客搭建","url":"/2022/12/10/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","content":"##初衷：搭建博客的目的是为了记录学习，因为之前的一次失误导致了本可以记录电脑的重要笔记都丢失了。##结果：选择了Hexo博客，主题选择了Anatolo，也可以去主题仓库 ，自行选择。\n搭建Hexo：\n首先安装node.js、npm ，并配置环境变量。若出现如下图所示，即可成功。\n \n\n进入Hexo，依次终端输入\n npm install hexo-cli -ghexo init blogcd blognpm installhexo server\n点击访问，若能成功，则搭建成功。若中途报错，建议更换网络或者配置国内源。\n # 配置腾讯源npm config set registry http://mirrors.cloud.tencent.com/npm/npm config get registry\n # 配置淘宝源npm config set registry https://registry.npmmirror.comnpm config get registry\nPS:若还报错建议安装 cnpm,然后使用cnpm 代替上面的npm安装命令。eg: cnpm install xxx\n npm install -g cnpm --registry=https://registry.npmmirror.com\n\n配置主题Anatolo\n进入Anatolo，然后进入终端：git clone https://gitee.com/Lhcfl/hexo-theme-anatolo.git themes/Anatolo#或者直接下载主题zip包解压至主题目录下，重命名为Anatolo\n安装依赖npm install hexo-renderer-pug --savenpm install hexo-renderer-stylus --save\n修改配置cd blog/themes/Anatolo/mv _config.example.yml _config.ymlcd /blogvim _config.yml#搜索替换以下内容theme: Anatolo\n更新git pull origin master\n5.具体主题配置可参考官网\n\n发布GitHub可参考CodeSheep原因是可以无服务器搭建，又能享有GitHub的永久存储。\nyoutube\nbilibili\n\n","tags":["博客"]},{"title":"Mac系统启动U盘制作","url":"/2022/12/14/Mac%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8U%E7%9B%98%E5%88%B6%E4%BD%9C/","content":"Mojave系统 启动u盘制作\n设置u盘名字为：Mojave（统一一下，为了后续shell不出错。）\n\n下载官方原版ISO镜像，这里提供三个（推荐下载Mojave，新系统安装完成后，可升级其它系统）。mojavecatalinabig-sur\n\n进入Mac终端输入：\nsudo /Applications/Install\\ macOS\\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/Mojave /Applications/Install\\ macOS\\ Mojave.app --nointeraction\n开机按option 然后进入u盘系统，然后即可重装系统\n\n\n","tags":["Mac"]},{"title":"Ubuntu22-04基本设置","url":"/2023/01/03/Ubuntu22-04%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/","content":"准备工作\n系统Ubuntu 22.04 LTS下载。\n\n系统安装\n进入系统，按回车即可.\n前置操作，很重要，直接会影响后续是否成功安装。\n经过漫长等待，终于进入系统，然后入下图所示退出安装 \n修改分辨率，否则会出现显示不全等现象。 \n设置分辨率 \n最后重新进入安装系统。 \n\n\n正式开始安装\n设置语言\n\n设置键盘输入法\n\n设置安装类型\n\n清除磁盘\n\n点击继续\n\n设置时区\n\n设置用户信息\n\n开始安装\n\n国内由于种种原因，下载直接跳过。\n\n之后点击\n\n重新启动,按回车即可进入系统。\n\n\n\n\n网络配置\n配置国内镜像源  \n搜索软件   \n设置中科大镜像源   \n重载信息   \n\n安装基础软件\n安装ssh工具sudo apt-get install openssh-server -y\n 测试： \n更新软件源，查看网络配置是否成功。sudo apt-get update -y\n \n列出可更新的软件sudo apt list --upgradable -y\n更新升级所有软件sudo apt-get upgrade -y\n安装较新的安装包。sudo apt-get dist-upgrade -y\n\n","tags":["ubuntu"]},{"title":"centos系统基本设置","url":"/2022/12/11/centos%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/","content":"系统基础设置\n配置阿里云镜像 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo \n更新缓存yum makecache \n安装epel源 yum -y install epel-release\n更新并升级yumyum update -y\n安装基础软件 yum install -y wget vim net-tools bash-completion\n\n安装docker与docker-compose 参考菜鸟教程\ndocker 安装\n使用国内高速镜像安装\n curl -sSL https://get.daocloud.io/docker | sh\n测试是否安装成功 \ndocker -v\n启动docker\n systemctl start docker\n设置开机启动docker\nsystemctl enable docker\n重启docker\nsystemctl restart docker\n\ncompose 安装\n运行以下命令以下载 Docker Compose 的当前稳定版本： sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n应用可执行权限 sudo chmod +x /usr/local/bin/docker-compose\n创建软链 sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n测试是否成功 docker-compose version\n\n配置国内镜像源\n点阿里云镜像源进去之后登陆，即可获取自己的镜像源，也可以使用我的，直接粘进系统即可食用。  sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://cp250x9p.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker\n\n配置防火墙\n查看防火墙状态 systemctl status firewalld\n开启防火墙 systemctl start firewalld\n关闭防火墙(临时） systemctl stop firewalld\n永久关闭防火墙 systemctl disable firewalld\n重启防火墙service firewalld restart\n放通某一端口 firewall-cmd --zone=public --add-port=80/tcp --permanent\n放通某一段端口 firewall-cmd --zone=public --add-port=4400-4600/tcp --permanent\n关闭某一端口  firewall-cmd --zone=public --remove-port=80/tcp --permanent\n关闭某一段端口  firewall-cmd --zone=public --remove-port=80-8000/tcp --permanent\n查看端口列表firewall-cmd --permanent --list-port\n\n宝塔安装请参考之前文章写的，点击这里 即可跳转。\n","tags":["Linux","docker","防火墙"]},{"title":"docker开启远程访问","url":"/2022/12/13/docker%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/","content":"docker version 20.10.21 开启远程访问，不可用于生产环境，只适用于内网部署项目。vim /usr/lib/systemd/system/docker.serviceExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\n\n然后进入宝塔面板放通tcp&#x2F;udp的2375端口\n最后进入idea测试：\n","tags":["docker"]},{"title":"centos开启BBR加速","url":"/2022/12/14/centos%E5%BC%80%E5%90%AFBBR%E5%8A%A0%E9%80%9F/","content":"前提条件，你服务器可以魔法上网。引言：开启BBR加速，给你的服务器换一个心脏\n\n安装基本软件yum install -y wget curl\n下载一键脚本 wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;chmod +x tcp.sh./tcp.sh\n安装完成执行脚本，如下图所示：\n具体安装说明可以参考这里，我的是先安装了2、然后7、最后10（仅供参考）\n\n","tags":["Linux"]},{"title":"docker-compose安装常用服务","url":"/2022/12/12/docker-compose%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1/","content":"PS: 安装docker与docker-compose，请点击查看我之前写的文章。\n安装mysql8.0.27\n创建文件夹\n mkdir mysql\n\n创建dock er-compose文件\n touch docker-compose.ymlvim docker-compose.yml\n编写docker-compose.yml\nversion: &#x27;3&#x27;services:  mysql_8.0.27:    #构建mysql镜像    image: mysql:8.0.27    container_name: mysql_8.0.27 # 容器名#    command: --default-authentication-plugin=mysql_native_password    restart: always    environment:      MYSQL_ROOT_PASSWORD: 123456 #root管理员用户密码#      MYSQL_USER: test   #创建test用户#      MYSQL_PASSWORD: test  #设置test用户的密码    ports:      - &#x27;3306:3306&#x27;  #host物理直接映射端口为3306    volumes:      #mysql数据库挂载到host物理机目录      - ./data/db:/var/lib/mysql      #容器的配置目录挂载到host物理机目录      - ./data/conf:/etc/mysql/conf.d\n运行docker-compose\n docker-compose up -d\n\n安装mysql5.7\n创建文件夹\n mkdir mysql_5.7\n\n创建dock er-compose文件\n touch docker-compose.ymlvim docker-compose.yml\n编写docker-compose.yml\nversion: &#x27;3&#x27;services:  mysql_5.7:    #构建mysql镜像    image: mysql:5.7    container_name: mysql_5.7 # 容器名#    command: --default-authentication-plugin=mysql_native_password    restart: always    environment:      MYSQL_ROOT_PASSWORD: 123456 #root管理员用户密码#      MYSQL_USER: test   #创建test用户#      MYSQL_PASSWORD: test  #设置test用户的密码    ports:      - &#x27;13306:3306&#x27;  #host物理直接映射端口为13306    volumes:      #mysql数据库挂载到host物理机目录      - ./data/db:/var/lib/mysql      #容器的配置目录挂载到host物理机目录      - ./data/conf:/etc/mysql/conf.d\n运行docker-compose\n docker-compose up -d\n\n安装redis\n创建文件夹\n mkdir redis\n\n创建dock er-compose文件\n touch docker-compose.ymlvim docker-compose.yml\n编写docker-compose.yml\nversion: &#x27;3&#x27;services:  redis:    image: redis:latest    container_name: redis    restart: always    privileged: true    volumes:      - ./data:/data      - ./redis.conf:/usr/local/etc/redis/redis.conf      - ./logs:/logs    command:      /bin/bash -c &quot;redis-server /usr/local/etc/redis/redis.conf&quot;    ports:      - &quot;6379:6379&quot;\n编写redis配置文件\n touch redis.confvim redis.conf\n daemonize nopidfile /var/run/redis.pidport 6379timeout 0loglevel verboselogfile /logs/redis.logdatabases 110save 900 1save 300 10save 60 10000rdbcompression yesdbfilename dump.rdbdir ./slave-serve-stale-data yes#配置密码requirepass 12345678appendonly yesappendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mbslowlog-log-slower-than 10000slowlog-max-len 1024list-max-ziplist-entries 512list-max-ziplist-value 64set-max-intset-entries 512zset-max-ziplist-entries 128zset-max-ziplist-value 64activerehashing yes\n\n运行docker-compose\n docker-compose up -d\n\n","tags":["docker"]},{"title":"docker搭建Halo博客","url":"/2022/12/14/docker%E6%90%AD%E5%BB%BAHalo%E5%8D%9A%E5%AE%A2/","content":"系统选择了centos，系统搭建和docker安装参考前面那篇文章。首先进入Halo官网，为什么我选这个版本呢？其一我看了官网文档，这个版本易于Halo2.0升级。其二1.X的主题特别多。\nHalo+H2数据库搭建\n进入任意文件夹\n mkdir Halo cd Halotouch ocker-compose.yamlvim docker-compose.yaml\n\n编辑docker-compose.yaml文件   \n version: &quot;3&quot;services:  halo:    image: halohub/halo:1.6.0    container_name: halo    restart: on-failure:3    volumes:      - ./:/root/.halo    ports:      - &quot;8090:8090&quot;    environment:      - SERVER_PORT=8090      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.h2.Driver      - SPRING_DATASOURCE_URL=jdbc:h2:file:~/.halo/db/halo      - SPRING_DATASOURCE_USERNAME=admin   # 数据库用户名      - SPRING_DATASOURCE_PASSWORD=o#DwN&amp;JSa56   #数据库密码      - HALO_ADMIN_PATH=admin      #博客管理后台登陆账号      - HALO_CACHE=memory       # 博客管理后台登陆密码\n启动项目\n docker-compose up -d\n\nHalo+mysql数据库搭建\n进入任意文件夹 mkdir Halo cd Halotouch ocker-compose.yamlvim docker-compose.yaml\n编辑docker-compose.yaml文件    version: &quot;3&quot;services:  halo_server:    image: halohub/halo:1.6.0    container_name: halo_server    restart: on-failure:3    depends_on:      - halo_mysql    networks:      halo_network:    volumes:      - ./:/root/.halo    ports:      - &quot;8090:8090&quot;    environment:      - SERVER_PORT=8090      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver      - SPRING_DATASOURCE_URL=jdbc:mysql://halo_mysql:3306/halodb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true      - SPRING_DATASOURCE_USERNAME=root     # 数据库用户名      - SPRING_DATASOURCE_PASSWORD=o#DwN&amp;JSa56   # 数据库密码      - HALO_ADMIN_PATH=admin  # 博客管理后台用户名      - HALO_CACHE=memory     #博客管理后台密码  halo_mysql:    image: mysql:8.0.27    container_name: halo_mysql    restart: on-failure:3    networks:      halo_network:    command: --default-authentication-plugin=mysql_native_password      --character-set-server=utf8mb4      --collation-server=utf8mb4_general_ci      --explicit_defaults_for_timestamp=true    volumes:      - /etc/localtime:/etc/localtime:ro      - ./mysql:/var/lib/mysql      - ./mysqlBackup:/data/mysqlBackup    ports:      - &quot;3306:3306&quot;    environment:      # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_DATASOURCE_PASSWORD 变量值      - MYSQL_ROOT_PASSWORD=o#DwN&amp;JSa56  # 数据库密码      - MYSQL_DATABASE=halodbnetworks:  halo_network:\n启动项目 docker-compose up -d\n\nHalo+mysql+redis搭建\n进入任意文件夹 mkdir Halo cd Halotouch ocker-compose.yamlvim docker-compose.yaml\n编辑docker-compose.yaml文件    version: &quot;3&quot;services:  halo_server:    image: halohub/halo:1.6.0    container_name: halo_server    restart: on-failure:3    depends_on:      - halo_mysql      - halo_redis    networks:      halo_network:    volumes:      - ./:/root/.halo    ports:      - &quot;8090:8090&quot;    environment:      - SERVER_PORT=8090      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver      - SPRING_DATASOURCE_URL=jdbc:mysql://halo_mysql:3306/halodb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true      - SPRING_DATASOURCE_USERNAME=root      - SPRING_DATASOURCE_PASSWORD=o#DwN&amp;JSa56  #mysql密码      - HALO_ADMIN_PATH=admin   #后台用户      - HALO_CACHE=redis  #后台密码      - SPRING_REDIS_PORT=6379      - SPRING_REDIS_DATABASE=0      - SPRING_REDIS_HOST=halo_redis       - SPRING_REDIS_PASSWORD=dm5fD%rvPtq  #redis密码  halo_mysql:    image: mysql:8.0.27    container_name: halo_mysql    restart: on-failure:3    networks:      halo_network:    command: --default-authentication-plugin=mysql_native_password      --character-set-server=utf8mb4      --collation-server=utf8mb4_general_ci      --explicit_defaults_for_timestamp=true    volumes:      - /etc/localtime:/etc/localtime:ro      - ./mysql:/var/lib/mysql      - ./mysqlBackup:/data/mysqlBackup    ports:      - &quot;3306:3306&quot;    environment:      # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_DATASOURCE_PASSWORD 变量值      - MYSQL_ROOT_PASSWORD=o#DwN&amp;JSa56      - MYSQL_DATABASE=halodb  halo_redis:    image: redis    container_name: halo_redis    restart: on-failure:3    networks:      halo_network:    volumes:      - ./redis/data:/data      - ./redis/logs:/logs    # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_REDIS_PASSWORD 变量值    command: redis-server --requirepass dm5fD%rvPtq    ports:      - &quot;6379:6379&quot;networks:  halo_network:\n启动项目 docker-compose up -d\n\n主题配置PS:可以直接去主题官网，里面都有很详细的配置。\n","tags":["博客"]},{"title":"github基本操作","url":"/2022/12/16/github%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","content":"初始化本地仓库为GitHub仓库\n将这个文件夹变成Git可管理的仓库。 git init\n将这个目录下的所有文件添加到仓库 git add .\n提交说明 git commit -m &quot;first commit&quot;\n将本地仓库与GitHub上创建好的目标远程仓库进行关联。 git remote add origin 远程仓库地址\n创建主分支git branch -M main\n将主分支提交到远程git push origin main\n查看远程主分支git branch -r\n\n提交本地文件到GitHub\n查看当前分支情况，*标识的是你当前所在的分支。 git branch\n将这个目录下的所有文件添加到仓库 git add .\n提交说明 git commit -m &quot;first commit&quot;\n提交到远程分支git push origin main\n\n创建分支\n查看当前分支情况，*标识的是你当前所在的分支。 git branch\n\n查看远程分支  git branch -r\n查看所有分支   git branch -a\n\n\n新建一个分支test git branch test\n切换到新建的分支testgit checkout test\n\n创建加切换分支  git checkout -b [branch name]\n\n\n将新建分支test推送到GitHub上 git push origin test\n\n合并分支\n查看当前分支情况，*标识的是你当前所在的分支。 git branch\n切换分支到test（需要合并的分支）git checkout test\n提交这个目录下的所有文件git add .\n# 提交指定文件git add test.txt \n提交说明信息git commit -m &quot;备注&quot; \n提交到test分支 git push origin test\n再把工作从test分支下切换到main下git checkout main\n重新拉取主分支项目（防止别人已经提交了文件，此时你提交会覆盖别人提交的内容）git pull origin main \n将test分支合并到main上git merge test\n\n产生冲突\n查看产生冲突文件git diff\n查看分支中内容提交的状态git status\n把修改的内容提交到主分支上git push origin main\n\n若提交出现问题\n撤销合并恢复到以前状态git reset --hard HEAD\n撤销远程分支git reset --hard ORIG_HEAD\n\n删除分支\n删除本地分支git branch -d [branch name]\n删除远程分支git push origin :[branch name]\nPS: 删除主分支。思路：创建一个新分支，然后去官网设置新分支为主分支，然后再删除远程原主分支。\n\n重命名分支\n重命名本地分支git branch -m test newTest\n删除远程对应的旧分支git push origin --delete test\n将本地的新分支推送到远程git push -u origin newTest\n\n","tags":["GitHub"]},{"title":"shell常用命令","url":"/2022/12/26/shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"常用命令\n历史记录history\n执行历史记录的某一条命令。 # !+行号!350 \n变量与值之间不得有空格# 单引号变量,不识别特殊语法，双引号变量识别特殊语法。name=&quot;ts&quot;\n输出变量echo $name\n执行shell#使用bash/sh执行脚本，会开启子shell，不会保留变量信息。bash xxx.sh#使用source或者点符号，在当前shell加载脚本，会保留变量信息source xxx.sh./sh   \n历史记录   \n\n","tags":["Linux","Shell"]},{"title":"office免费激活","url":"/2022/12/18/office%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB/","content":"激活Windows中的Office LTSC 专业增强版\n首先进入Office Tool Plus，然后下载如下图所示：然后解压进去点击可执行应用程序直接安装，如下图所示：\n\n若之前有word之类的。需要先卸载之前版本之后。再执行如上操作。卸载完成后，执行如下操作。\n\n此时word应该安装成功。然后激活它。  第三步的KMS主机地址，可以在这里查询。\n\n最后进入软件，查看是否激活。\n\n\n","tags":["office","Windows"]},{"title":"vue+axios请求实现下载功能","url":"/2022/12/25/vue-axios%E5%AE%9E%E7%8E%B0%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/","content":"版本为：“vue”: “^2.6.14”,“axios”: “^1.2.1”,“element-ui”: “^2.4.5”,\n\nUI界面，具体代码参考GitHub,若对您有帮助，还希望您点一个Star。&lt;el-button    size=&quot;mini&quot;    type=&quot;success&quot; plain    @click=&quot;downloadFile(scope.$index, scope.row)&quot;&gt;下载&lt;/el-button&gt;\njs逻辑downloadFile(index,row)&#123;  axios.get(&#x27;/api/download&#x27;,&#123;    params: &#123;    // 请求参数拼接在url上      fileName: row.fileName    &#125;,responseType: &quot;blob&quot;  &#125;).then(res=&gt;&#123;    const type = String(row.fileName.split(&#x27;.&#x27;).slice(-1));    let blob = new Blob([res.data], &#123;      type: type //这里需要根据不同的文件格式写不同的参数,例如：.mp3、.mp4    &#125;);    let eLink = document.createElement(&quot;a&quot;);    eLink.download = row.fileName; //这里需要自己给下载的文件命名    eLink.style.display = &quot;none&quot;;    eLink.href = URL.createObjectURL(blob);    document.body.appendChild(eLink);    eLink.click();    URL.revokeObjectURL(eLink.href);    document.body.removeChild(eLink);  &#125;)&#125;,\nSpringBoot 后端接口,整合minio，具体代码参考GitHub,若对您有帮助，还希望您点一个Star。   /** * 下载文件 serverImpl层 * * @param fileName 文件名 */@Overridepublic R download( HttpServletResponse response, String fileName) &#123;    // get object given the bucket and object name    try (InputStream stream = minioClient.getObject(            GetObjectArgs.builder()                    .bucket(bucket)                    .object(fileName)                    .build())) &#123;        // Read data from stream        //浏览器指定下载类型        response.setHeader(&quot;content-disposition&quot;,&quot;attachment;filename=&quot;+ URLEncoder.encode(fileName,&quot;UTF-8&quot;));        //下载文件        IOUtils.copy(stream, response.getOutputStream());    &#125;catch (MinioException | InvalidKeyException | IOException | NoSuchAlgorithmException e)&#123;        log.error(e.getMessage());        return R.error().message(&quot;下载失败&quot;);    &#125;    return R.success().message(&quot;下载成功&quot;);&#125;\n /** * 下载文件 server * @param fileName 文件名 */R download(HttpServletResponse response, String fileName);\n /** * 下载文件 controller层 * @param fileName 文件名 */@GetMapping(&quot;/download&quot;)public R download(HttpServletResponse response,String fileName)&#123;    return R.success().map(&quot;data&quot;,fileService.download(response,fileName));&#125; \n\n","tags":["vue","SpringBoot"]},{"title":"使用KMS激活Windows","url":"/2022/12/18/%E4%BD%BF%E7%94%A8KMS%E6%BF%80%E6%B4%BBWindows/","content":"纯净无广告激活Windows，GitHub已经开源，请访问 即可。\n首先进入官网 ,下载。\n进入软件，按下图操作即可激活。PS: 若没激活可以多试几次。\n进入我的电脑，直接查看是否激活。\n\n","tags":["Windows"]},{"title":"处理远程ssh链接时候出现的WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED警告","url":"/2022/12/16/%E5%A4%84%E7%90%86%E8%BF%9C%E7%A8%8Bssh%E9%93%BE%E6%8E%A5%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E7%9A%84WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED%E8%AD%A6%E5%91%8A/","content":"若远程连接ssh时出现如下图所示：解决方法：\nssh-keygen -R ip地址","tags":["Linux"]},{"title":"用rsync给你的服务器备份吧~","url":"/2022/12/15/%E7%94%A8rsync%E7%BB%99%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%87%E4%BB%BD%E5%90%A7/","content":"引言：使用rsync可以使两台及以上服务器互相备份，一台当主服务器一台当备份服务器来确保服务器数据安全。\n优点：\n\n两台服务器不限内外网环境。\n可以指定备份服务器的IP地址\n可以设置密码，防止第三方盗取备份数据。\n\n实验环境本人一台本地服务器（centos），和一台本地存储服务器（TrueNAS）\n要备份的服务器(主服务器)\n安装rsync yum -y install rsync cd /etc\n进入etc目录找到rsyncd.conf ，说明rsync安装成功。\n编辑rsyncd.conf文件 vim rsyncd.conf\n #名称随意[centos]# 要备份的目录path = /home/list = yesread only = noignore errors#连接用户auth users = rootuid = rootgid = root#链接密码secrets file = /etc/rsyncd.secre#运行共享的IP，也支持IP网段。例如：192.168.98.0/24hosts allow = 192.168.100.1\n :wq!\n配置passwordcd /etctouch rsyncd.secrevim rsyncd.secre \n root:12345678\n配置权限chmod 600 /etc/rsyncd.secre\n配置开机启动systemctl start rsyncd #启动rsync服务systemctl enable rsyncd #将rsync服务 加入开机自启systemctl restart rsyncd #重启服务\n放通端口sudo firewall-cmd --add-port=873/tcp --permanentsudo firewall-cmd --reloadsudo firewall-cmd --list-all\n禁用selinux的安全增强\n临时禁用 setenforce 0\n永久关闭vim /etc/selinux/config将SELINUX=enforcing 改为SELINUX=disabled\n改完如下图所示：\n最后重启主机  reboot\n\n\n\n存储服务器（从服务器）\n从存储服务器测试rsync root@192.168.100.175::centos\nPS：命令说明，root是上面所指定的用户名，IP是你需要备份的IP，最后的名称是你自定义的名称，最后说明一点需要将存储服务器IP设为：192.168.100.1与上面指定服务器一样，网段也同理。\nTrueNAS 拉取并备份然后添加任务即可。PS：至于要备份到其它服务器可以参考知名up主 司波图youtubebilibili\n\n","tags":["Linux"]},{"title":"安装宝塔面板","url":"/2022/12/11/%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/","content":"一键安装脚本，过期可查看官网，下滑页面即可查询最新命令if [ -f /usr/bin/curl ];then curl -sSO https://download.bt.cn/install/install_panel.sh;else wget -O install_panel.sh https://download.bt.cn/install/install_panel.sh;fi;bash install_panel.sh ed8484bec","tags":["Linux","宝塔面板"]},{"title":"解决向github提交代码每次都要求输入密码的问题","url":"/2022/12/10/%E8%A7%A3%E5%86%B3%E5%90%91github%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A6%81%E6%B1%82%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/","content":"\n终端输入 git config --global credential.helper store\nPS：逻辑是将第一次输入的密码存入.gitconfig文件之中，以后就再也不用提交时输入密码。\n\n","tags":["GitHub"]}]