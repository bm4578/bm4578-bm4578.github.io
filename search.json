[{"title":"Centos7安装java8与maven","url":"/2023/03/20/Centos7%E5%AE%89%E8%A3%85java8%E4%B8%8Emaven/","content":"安装java以下是在CentOS上安装Java 8的步骤：\n\n下载jdk mkdir -p /usr/local/javacd /usr/local/java\n wget https://link.storjshare.io/ju5wgan2r5xtitkkfbfzj4ml3tlq/data%2Fdev%2Fjava%2Fjdk-8u361-linux-x64.tar.gz?download=1 -Ojdk-8u361-linux-x64.tar.gz\n tar xzf jdk-8u361-linux-x64.tar.gz \n mv jdk1.8.0_361 jdk\n设置JAVA_HOME环境变量。这是Java的安装路径，Jenkins等软件需要它来找到Java。您可以在&#x2F;etc&#x2F;profile文件中添加以下行：vim /etc/profile\n ############# 配置java8环境变量 #############export PATH=/usr/local/java/jdk/bin:$PATH\n 保存文件并执行以下命令使环境变量生效： source /etc/profile\n任意目录输入javac\n 若出现如下，说明配置生效。 \n\n安装maven\n下载Maven。可以从官方网站 下载，也可以使用我提供的直链一键下载。\n cd /usr/local/java\n wget https://link.storjshare.io/jxchegg23y5cri46if5ci7xcqyyq/data%2Fdev%2Fjava%2Fapache-maven-3.8.8-bin.tar.gz?download=1 -Oapache-maven-3.8.8-bin.tar.gz\n解压Maven二进制包。\ntar xzf apache-maven-3.8.8-bin.tar.gz\nmv apache-maven-3.8.8 maven\n rm -rf *.gz\n mv apache-maven-3.8.8 maven\n设置Maven环境变量。为了能够在任何地方运行Maven，我们需要将Maven的bin目录添加到PATH环境变量中。可以使用以下命令将其添加到当前用户的环境变量中：\nvim /etc/profile\n############# 配置maven环境变量############# export PATH=/usr/local/java/maven/bin:$PATH\n 保存文件并执行以下命令使环境变量生效：\n source /etc/profile\n\n验证Maven是否正确安装。可以使用以下命令检查Maven的版本号：\nmvn -version\n   \n\n配置阿里镜像\ncd /usr/local/java/maven/conf\n \n rm -rf settings.xml\n 然后替换即可\n wget https://link.storjshare.io/jxphxsx32n7nsbj22zgxvfeuoaza/data%2Fdev%2Fjava%2Fsettings.xml?download=1 -Osettings.xml\n\n补充\njdk下载 wget https://link.storjshare.io/ju5wgan2r5xtitkkfbfzj4ml3tlq/data%2Fdev%2Fjava%2Fjdk-8u361-linux-x64.tar.gz?download=1 -Ojdk-8u361-linux-x64.tar.gz\nmaven下载 wget https://link.storjshare.io/jxchegg23y5cri46if5ci7xcqyyq/data%2Fdev%2Fjava%2Fapache-maven-3.8.8-bin.tar.gz?download=1 -Oapache-maven-3.8.8-bin.tar.gz\nmaven 配置文件下载wget https://link.storjshare.io/jxphxsx32n7nsbj22zgxvfeuoaza/data%2Fdev%2Fjava%2Fsettings.xml?download=1 -Osettings.xml\n备用地址\njdk   wget http://bm4578.eu.org:46086/dev/java/jdk-8u361-linux-x64.tar.gz\nmaven  wget http://bm4578.eu.org:46086/dev/maven/apache-maven-3.8.8-bin.tar.gz\nmaven配置文件  wget http://bm4578.eu.org:46086/dev/maven/settings.xml\n\n\n\n","tags":["java","maven","centos"]},{"title":"Mac安装docker-compose","url":"/2023/03/13/Mac%E5%AE%89%E8%A3%85docker-compose/","content":"docker-compose 安装\n运行以下命令以下载 Docker Compose 的当前稳定版本：\n sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n\n应用可执行权限\n sudo chmod +x /usr/local/bin/docker-compose\n\n测试是否成功\n docker-compose version\n\n配置国内镜像源\n点阿里云镜像源进去之后登陆，即可获取自己的镜像源，也可以使用我的，直接粘进系统即可食用。\n  sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://cp250x9p.mirror.aliyuncs.com&quot;]&#125;EOF\n\n","tags":["Mac","docker-compose"]},{"title":"Hexo博客搭建","url":"/2022/12/10/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","content":"#初衷：搭建博客的目的是为了记录学习，因为之前的一次失误导致了本可以记录电脑的重要笔记都丢失了。##结果：选择了Hexo博客，主题选择了Anatolo，也可以去主题仓库 ，自行选择。\n搭建Hexo：\n首先安装node.js、npm ，并配置环境变量。若出现如下图所示，即可成功。\n \n\n进入Hexo，依次终端输入\n npm install hexo-cli -ghexo init blogcd blognpm installhexo server\n点击访问，若能成功，则搭建成功。若中途报错，建议更换网络或者配置国内源。\n npm config set registry https://registry.npm.taobao.orgnpm config get registry\nPS:若还报错建议安装 cnpm,然后使用cnpm 代替上面的npm安装命令。eg: cnpm install xxx\n npm install -g cnpm --registry=https://registry.npmmirror.com\n\n配置主题Anatolo\n进入Anatolo，然后进入终端：git clone https://gitee.com/Lhcfl/hexo-theme-anatolo.git themes/Anatolo#或者直接下载主题zip包解压至主题目录下，重命名为Anatolo\n安装依赖npm install hexo-renderer-pug --savenpm install hexo-renderer-stylus --save\n修改配置cd blog/themes/Anatolo/mv _config.example.yml _config.ymlcd /blogvim _config.yml#搜索替换以下内容theme: Anatolo\n更新git pull origin master\n5.具体主题配置可参考官网\n\n发布GithubPS:发布GitHub可参考CodeSheep \n\nyoutube\nbilibili\n\n","tags":["博客"]},{"title":"Mac终端配置oh-my-zsh","url":"/2023/01/17/Mac%E7%BB%88%E7%AB%AF%E9%85%8D%E7%BD%AEoh-my-zsh/","content":"安装oh-my-zsh终端输入\n\n官方命令 。  sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;\n国内安装，请参考 。 zsh -c &quot;$(curl -fsSL &#x27;https://api.host.mintimate.cn/fileHost/public/download/1P0R&#x27;)&quot;\n\n配置主题\n编辑配置文件vim ~/.zshrc\n\n配置主题 ，查询主题 ，直接替换即可。     \n配置自动补全插件 。 cd .oh-my-zsh/plugins/mkdir incrcd incr\n wget https://mimosa-pudica.net/src/incr-0.2.zsh\n   vim ~/.zshrc\n\n在配置文件末尾添加source ~/.oh-my-zsh/plugins/incr/incr*.zsh\n\n\n更新配置文件。 source ~/.zshrc\n\n\n\n","tags":["Mac"]},{"title":"RPC框架","url":"/2023/03/10/RPC%E6%A1%86%E6%9E%B6/","content":"远程过程调用协议RPC（Remote Procedure Call Protocol) 首先了解什么叫RPC，为什么要RPC，RPC是指远程过程调用，也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数&#x2F;方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。\nRPC框架是远程过程调用（Remote Procedure Call）的缩写。它提供了一种使应用程序在网络上进行远程调用的机制，从而使分布式计算（应用）更加容易。RPC框架可以在提供强大的远程调用能力的同时，不损失本地调用的语义简洁性。\nRPC框架有多种选择，例如Thrift、gRPC、Dubbo等。这些框架都有其自身的特点和优缺点，可以根据具体的应用场景进行选择。\nDubbo是一个分布式服务框架，以及SOA治理方案。其功能主要包括高性能NIO通讯及多协议集成，服务动态寻址与路由，软负载均衡与容错，依赖分析与降级等。\n总之，RPC框架是用于实现分布式计算的重要工具，具有广泛的应用。开发者可以根据应用场景和需求选择合适的RPC框架，以提高系统性能和可扩展性。\n","tags":["java"]},{"title":"Mac系统启动U盘制作","url":"/2022/12/14/Mac%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8U%E7%9B%98%E5%88%B6%E4%BD%9C/","content":"制作教程PS:教程来源于Apple官网，需要注意，此系统U盘引导镜像需要Mac系统正常时，提前制作。\n系统下载 、开始制作 \n使用教程开机按option 然后进入u盘系统，即可重装系统。\n\n","tags":["Mac"]},{"title":"Ubuntu22.04安装NVDIA显卡驱动","url":"/2023/01/07/Ubuntu22-04%E5%AE%89%E8%A3%85NVDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/","content":"实验环境\n系统：Ubuntu 22.04 LTS，下载地址 。\n显卡： Nvidia Tesla P4\n\n具体步骤PS: 由于装上显卡，会导致进不去桌面，需要提前安装好ssh连接工具。安装教程请参考 。\n\n查询驱动 ubuntu-drivers devices\n \n安装驱动 sudo apt-get install nvidia-driver-455\n重启系统 sudo reboot\n查看驱动 # 静态查询nvidia-smi# 动态查询watch -n 1 nvidia-smi\n \n\n","tags":["ubuntu","Nvidia"]},{"title":"Ubuntu22-04系统安装与基本设置","url":"/2023/01/03/Ubuntu22-04%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/","content":"准备工作\n系统Ubuntu 22.04 LTS下载。\n\n系统安装\n进入系统，按回车即可.\n前置操作，很重要，直接会影响后续是否成功安装。\n经过漫长等待，终于进入系统，然后入下图所示退出安装 \n修改分辨率，否则会出现显示不全等现象。 \n设置分辨率 \n最后重新进入安装系统。 \n\n\n正式开始安装\n设置语言\n\n设置键盘输入法\n\n设置安装类型\n\n清除磁盘\n\n点击继续\n\n设置时区\n\n设置用户信息\n\n开始安装\n\n国内由于种种原因，下载直接跳过。\n\n之后点击\n\n重新启动,按回车即可进入系统。\n\n\n\n\n网络配置\n配置国内镜像源  \n搜索软件   \n设置中科大镜像源   \n重载信息   \n\n安装基础软件\n安装ssh工具sudo apt-get install openssh-server -y\n 测试： \n更新软件源，查看网络配置是否成功。sudo apt-get update -y\n \n列出可更新的软件sudo apt list --upgradable -y\n更新升级所有软件sudo apt-get upgrade -y\n安装较新的安装包。sudo apt-get dist-upgrade -y\n\n","tags":["ubuntu"]},{"title":"vue3中使用异步函数生成验证码倒计时","url":"/2023/02/11/Vue3%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81%E5%80%92%E8%AE%A1%E6%97%B6/","content":"为了防止通过网页频繁调取后台接口，可以加入倒计时限制\n&lt;el-button    link    v-if=&quot;!img.isCode&quot;    @click=&quot;sendCode&quot;&gt;重新获取验证码&lt;/el-button&gt;&lt;el-button    style=&quot;margin-left: 30px&quot;    link    v-if=&quot;img.isCode&quot;&gt;&#123;&#123; img.codeTime &#125;&#125;s&lt;/el-button&gt;\n//初始时间，和倒计时模块是否显示const img = reactive(&#123;   imgUrl : &#x27;/api/user/imgCode&#x27;,   codeTime: 60,   isCode: false&#125;)let clear = null//异步函数const sendCode = async () =&gt; &#123;  img.isCode = true  img.imgUrl = &#x27;/api/user/imgCode?time=&#x27; +new Date()  clear= setInterval(() =&gt; &#123;    // 每次时间 -1    img.codeTime--;    // 时间=0时 清除定时器    if (img.codeTime === 0) &#123;      //清除定时器      clearInterval(clear);      // 还原 倒计时60s      img.codeTime = 60;      img.isCode = false    &#125;  &#125;, 1000);&#125;","tags":["vue"]},{"title":"centos开启BBR加速","url":"/2022/12/14/centos%E5%BC%80%E5%90%AFBBR%E5%8A%A0%E9%80%9F/","content":"前提条件，你服务器可以魔法上网。引言：开启BBR加速，给你的服务器换一个心脏\n\n安装基本软件yum install -y wget curl\n下载一键脚本 wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;chmod +x tcp.sh./tcp.sh\n安装完成执行脚本，如下图所示：\n具体安装说明可以参考这里，我的是先安装了2、然后7、最后10（仅供参考）\n\n","tags":["centos"]},{"title":"centos常用命令","url":"/2023/02/22/centos%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"常用命令yum install 安装软件yum update 升级系统yum remove 卸载软件ifconfig 查看网络接口信息service 服务管理chkconfig 服务开机启动配置useradd 添加用户passwd 修改用户密码su 切换用户pwd 显示当前所在目录ls 显示目录下文件cd 进入目录mkdir 创建目录rm 删除文件和目录cp 复制文件和目录mv 移动文件和目录cat 查看文件内容tail -f 查看文件尾部并自动刷新ps aux 查看正在运行的进程kill 杀死进程df -h 查看磁盘使用情况du -sh 查看目录大小ifconfig 配置网络接口nmtui 配置网关与网络\n端口相关telnet 远程登录其他机器nmap 扫描网络主机的开放端口netstat 查看本机网络连接、端口等信息lsof -i :端口号 查看占用某个端口的进程信息systemctl status firewalld 查看防火墙状态命令systemctl start firewalld 开启防火墙systemctl stop firewalld 临时关闭防火墙systemctl disable firewalld 永久关闭防火墙firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent 放通80端口firewall-cmd –zone&#x3D;public –add-port&#x3D;4400-4600&#x2F;udp –permanent 放通端口段firewall-cmd –zone&#x3D;public –remove-port&#x3D;80&#x2F;tcp –permanent 关闭端口firewall-cmd –permanent –list-port 查看放通端口firewall-cmd –reload      立即生效\ndocker 相关基础命令docker search 搜索镜像docker pull 拉取镜像docker images 查看本地镜像docker run 运行镜像docker ps 查看运行中的容器docker rm 删除容器docker rmi 删除镜像docker start 启动已停止运行的容器docker stop 停止运行中的容器docker exec 进入运行中的容器docker commit 提交容器成为一个新的镜像docker build 构建镜像docker push 上传镜像到仓库docker volume 管理数据卷docker network 管理网络systemctl enable docker 开机自动启动dockersystemctl start docker 启动dockersystemctl restart docker 重启dockersystemctl stop docker 关闭dockerdocker exec -it 4d bash 进入容器，其中4d为镜像iddocker logs 4d 查看容器日志，其中4d为镜像id\ndocker-compose 相关命令docker-compose build 构建或重构服务docker-compose up 启动并运行你的应用docker-compose up -d 后台运行你的应用docker-compose -f test.yml up -d 指定文件txt.yml模板容器后天运行docker-compose logs 查看应用程序的日志docker-compose stop 停止应用程序docker-compose start 启动应用程序docker-compose restart 重启应用程序docker-compose rm 删除停止的服务容器docker-compose down 停止并删除容器,网络,卷,镜像等docker-compose scale web&#x3D;3 扩展 web 服务,将其数量增加到 3 个容器docker-compose exec web env 查看 web 服务的环境变量docker-compose config 验证并查看compose文件docker-compose pause 暂停一个服务容器docker-compose unpause 恢复一个服务容器\ndocker 容器迁移相关命令docker cp 容器内的文件拷贝到宿主机docker export 导出容器的文件系统成为一个压缩包docker import 从压缩包导入镜像docker load 从tar包加载镜像docker save 将镜像保存为tar包docker info 显示docker相关信息docker version 显示docker版本信息docker rename 重命名容器docker update 更新容器的资源限制docker diff 检查容器文件系统的变化docker history 查看镜像的历史记录docker port 查看容器的端口映射docker stats 显示容器的资源使用情况docker top 查看容器中运行的进程信息docker wait 阻塞直到容器停止运行docker logs 日志docker logs -f 实时查看日志docker kill 杀死运行中的容器docker container prune 删除所有停止的容器docker system prune 删除所有未使用的镜像,容器,卷和网络docker rm -v 删除容器和关联的数据卷docker rm -f 强制删除正在运行的容器docker tag 给源镜像打标签docker tag ubuntu:16.04 ubuntu:xenialdocker tag 可以在同一仓库下,也可以跨仓库docker push 向Docker Hub推送镜像docker push ubuntu:xenial\n","tags":["docker-compose","centos","docker"]},{"title":"docker-compose安装常用服务","url":"/2022/12/12/docker-compose%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1/","content":"环境搭建 、 部署脚本\n使用说明\n拉取仓库\n git clone https://github.com/bm4578/docker-compose.git\n\n进入要安装的目录，这里以mysql为例\n cd docker-compose/mysql/mysql8.0.27\n\n配置自己需要的信息\n vim docker-compose.yml\n\n 例如： \n\n执行安装命令\n docker-compose up -d\n\nPS：后续会不定期更新其它服务，若对您有帮助可以点一个免费的Star\n","tags":["docker-compose","docker"]},{"title":"centos系统基本设置","url":"/2022/12/11/centos%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/","content":"系统基础设置\n配置阿里云镜像 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo \n更新缓存yum makecache \n安装epel源 yum -y install epel-release\n更新并升级yumyum update -y\n安装基础软件 yum install -y wget vim net-tools bash-completion\n\n安装docker与docker-compose 参考菜鸟教程\ndocker 安装\n使用国内高速镜像安装\n curl -sSL https://get.daocloud.io/docker | sh\n测试是否安装成功 \ndocker -v\n启动docker\n systemctl start docker\n设置开机启动docker\nsystemctl enable docker\n重启docker\nsystemctl restart docker\n\ncompose 安装\n运行以下命令以下载 Docker Compose 的当前稳定版本： sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n应用可执行权限 sudo chmod +x /usr/local/bin/docker-compose\n创建软链 sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n测试是否成功 docker-compose version\n\n配置国内镜像源\n点阿里云镜像源进去之后登陆，即可获取自己的镜像源，也可以使用我的，直接粘进系统即可食用。  sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://cp250x9p.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker\n\n配置防火墙\n查看防火墙状态 systemctl status firewalld\n开启防火墙 systemctl start firewalld\n关闭防火墙(临时） systemctl stop firewalld\n永久关闭防火墙 systemctl disable firewalld\n重启防火墙service firewalld restart\n放通某一端口 firewall-cmd --zone=public --add-port=80/tcp --permanent\n放通某一段端口 firewall-cmd --zone=public --add-port=4400-4600/tcp --permanent\n关闭某一端口  firewall-cmd --zone=public --remove-port=80/tcp --permanent\n关闭某一段端口  firewall-cmd --zone=public --remove-port=80-8000/tcp --permanent\n查看端口列表firewall-cmd --permanent --list-port\n\n宝塔安装请参考之前文章写的，点击这里 即可跳转。\n","tags":["centos","docker","防火墙"]},{"title":"docker搭建Halo博客","url":"/2022/12/14/docker%E6%90%AD%E5%BB%BAHalo%E5%8D%9A%E5%AE%A2/","content":"系统选择了centos，系统搭建和docker安装参考前面那篇文章。首先进入Halo官网，为什么我选这个版本呢？其一我看了官网文档，这个版本易于Halo2.0升级。其二1.X的主题特别多。\nHalo+H2数据库搭建\n进入任意文件夹\n mkdir Halo cd Halotouch ocker-compose.yamlvim docker-compose.yaml\n\n编辑docker-compose.yaml文件   \n version: &quot;3&quot;services:  halo:    image: halohub/halo:1.6.0    container_name: halo    restart: on-failure:3    volumes:      - ./:/root/.halo    ports:      - &quot;8090:8090&quot;    environment:      - SERVER_PORT=8090      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.h2.Driver      - SPRING_DATASOURCE_URL=jdbc:h2:file:~/.halo/db/halo      - SPRING_DATASOURCE_USERNAME=admin   # 数据库用户名      - SPRING_DATASOURCE_PASSWORD=o#DwN&amp;JSa56   #数据库密码      - HALO_ADMIN_PATH=admin      #博客管理后台登陆账号      - HALO_CACHE=memory       # 博客管理后台登陆密码\n启动项目\n docker-compose up -d\n\nHalo+mysql数据库搭建\n进入任意文件夹 mkdir Halo cd Halotouch ocker-compose.yamlvim docker-compose.yaml\n编辑docker-compose.yaml文件    version: &quot;3&quot;services:  halo_server:    image: halohub/halo:1.6.0    container_name: halo_server    restart: on-failure:3    depends_on:      - halo_mysql    networks:      halo_network:    volumes:      - ./:/root/.halo    ports:      - &quot;8090:8090&quot;    environment:      - SERVER_PORT=8090      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver      - SPRING_DATASOURCE_URL=jdbc:mysql://halo_mysql:3306/halodb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true      - SPRING_DATASOURCE_USERNAME=root     # 数据库用户名      - SPRING_DATASOURCE_PASSWORD=o#DwN&amp;JSa56   # 数据库密码      - HALO_ADMIN_PATH=admin  # 博客管理后台用户名      - HALO_CACHE=memory     #博客管理后台密码  halo_mysql:    image: mysql:8.0.27    container_name: halo_mysql    restart: on-failure:3    networks:      halo_network:    command: --default-authentication-plugin=mysql_native_password      --character-set-server=utf8mb4      --collation-server=utf8mb4_general_ci      --explicit_defaults_for_timestamp=true    volumes:      - /etc/localtime:/etc/localtime:ro      - ./mysql:/var/lib/mysql      - ./mysqlBackup:/data/mysqlBackup    ports:      - &quot;3306:3306&quot;    environment:      # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_DATASOURCE_PASSWORD 变量值      - MYSQL_ROOT_PASSWORD=o#DwN&amp;JSa56  # 数据库密码      - MYSQL_DATABASE=halodbnetworks:  halo_network:\n启动项目 docker-compose up -d\n\nHalo+mysql+redis搭建\n进入任意文件夹 mkdir Halo cd Halotouch ocker-compose.yamlvim docker-compose.yaml\n编辑docker-compose.yaml文件    version: &quot;3&quot;services:  halo_server:    image: halohub/halo:1.6.0    container_name: halo_server    restart: on-failure:3    depends_on:      - halo_mysql      - halo_redis    networks:      halo_network:    volumes:      - ./:/root/.halo    ports:      - &quot;8090:8090&quot;    environment:      - SERVER_PORT=8090      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver      - SPRING_DATASOURCE_URL=jdbc:mysql://halo_mysql:3306/halodb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true      - SPRING_DATASOURCE_USERNAME=root      - SPRING_DATASOURCE_PASSWORD=o#DwN&amp;JSa56  #mysql密码      - HALO_ADMIN_PATH=admin   #后台用户      - HALO_CACHE=redis  #后台密码      - SPRING_REDIS_PORT=6379      - SPRING_REDIS_DATABASE=0      - SPRING_REDIS_HOST=halo_redis       - SPRING_REDIS_PASSWORD=dm5fD%rvPtq  #redis密码  halo_mysql:    image: mysql:8.0.27    container_name: halo_mysql    restart: on-failure:3    networks:      halo_network:    command: --default-authentication-plugin=mysql_native_password      --character-set-server=utf8mb4      --collation-server=utf8mb4_general_ci      --explicit_defaults_for_timestamp=true    volumes:      - /etc/localtime:/etc/localtime:ro      - ./mysql:/var/lib/mysql      - ./mysqlBackup:/data/mysqlBackup    ports:      - &quot;3306:3306&quot;    environment:      # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_DATASOURCE_PASSWORD 变量值      - MYSQL_ROOT_PASSWORD=o#DwN&amp;JSa56      - MYSQL_DATABASE=halodb  halo_redis:    image: redis    container_name: halo_redis    restart: on-failure:3    networks:      halo_network:    volumes:      - ./redis/data:/data      - ./redis/logs:/logs    # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_REDIS_PASSWORD 变量值    command: redis-server --requirepass dm5fD%rvPtq    ports:      - &quot;6379:6379&quot;networks:  halo_network:\n启动项目 docker-compose up -d\n\n主题配置PS:可以直接去主题官网，里面都有很详细的配置。\n","tags":["博客"]},{"title":"docker开启远程访问","url":"/2022/12/13/docker%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/","content":"docker version 20.10.21 开启远程访问，不可用于生产环境，只适用于内网部署项目。vim /usr/lib/systemd/system/docker.serviceExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\n\n然后进入宝塔面板放通tcp&#x2F;udp的2375端口\n最后进入idea测试：\n","tags":["docker"]},{"title":"esxi通过RDM直通硬盘","url":"/2023/03/08/esxi%E9%80%9A%E8%BF%87RDM%E7%9B%B4%E9%80%9A%E7%A1%AC%E7%9B%98/","content":"直通说明\n官方说明: 可使用 vmkfstools 命令将直通裸设备映射到 VMFS 卷上的文件。通过此映射，虚拟机可以在访问虚拟磁盘时绕过 ESXi SCSI 命令筛选。当虚拟机必须发送专有 SCSI 命令时，例如当 SAN 感知软件在虚拟机上运行时，此类型的映射非常有用。\n\n直通优劣势ESXi中使用RDM（Raw Device Mapping）直通的好处主要包括以下几点：\n\n更好的性能：使用RDM直通可以避免虚拟化层对磁盘的性能影响，因为磁盘可以直接访问宿主机的磁盘控制器和磁盘驱动器。\n\n更好的兼容性：某些应用程序可能需要直接访问物理磁盘。使用RDM直通可以满足这些应用程序的需求，同时保持VMware的虚拟化优势。\n\n更好的灵活性：使用RDM直通可以将虚拟机与特定的存储设备关联，这使得在虚拟机移动到其他宿主机时，无需重新映射存储。\n\n\n需要注意的是，RDM直通也有一些限制和不足，例如无法进行虚拟磁盘快照，需要手动管理磁盘大小和分区等。因此，在使用RDM直通之前，需要仔细考虑其优缺点，并根据实际需求做出决策。\n直通教程首先进入esxi终端，然后执行如下命令\n官方教程\n具体命令:\nvmkfstools -z /vmfs/devices/disks/t10.ATA_____ST500LT0122D1DG142___________________________________W3PN3MRT /vmfs/volumes/63707084-4c4bc288-ad0f-9c7da3e9d4fe/Alist/hdd.vmdk\n命令说明： \n\n第一个&#x2F;vmfs 路径为具体磁盘路径 \n第二个&#x2F;vmfs 路径为需要映射到esxi的路径，还需加上具体虚拟机路径(&#x2F;Alist)的名称与对应映射vmdk名称(&#x2F;hdd.vmdk 此名称随意，不可重复) \n\n","tags":["Esxi"]},{"title":"github基本操作","url":"/2022/12/16/github%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","content":"初始化本地仓库为GitHub仓库\n将这个文件夹变成Git可管理的仓库。 git init\n将这个目录下的所有文件添加到仓库 git add .\n提交说明 git commit -m &quot;first commit&quot;\n将本地仓库与GitHub上创建好的目标远程仓库进行关联。 git remote add origin 远程仓库地址\n创建主分支git branch -M main\n将主分支提交到远程git push origin main\n查看远程主分支git branch -r\n\n提交本地文件到GitHub\n查看当前分支情况，*标识的是你当前所在的分支。 git branch\n将这个目录下的所有文件添加到仓库 git add .\n提交说明 git commit -m &quot;first commit&quot;\n提交到远程分支git push origin main\n\n创建分支\n查看当前分支情况，*标识的是你当前所在的分支。 git branch\n\n查看远程分支  git branch -r\n查看所有分支   git branch -a\n\n\n新建一个分支test git branch test\n切换到新建的分支testgit checkout test\n\n创建加切换分支  git checkout -b [branch name]\n\n\n将新建分支test推送到GitHub上 git push origin test\n\n合并分支\n查看当前分支情况，*标识的是你当前所在的分支。 git branch\n切换分支到test（需要合并的分支）git checkout test\n提交这个目录下的所有文件git add .\n# 提交指定文件git add test.txt \n提交说明信息git commit -m &quot;备注&quot; \n提交到test分支 git push origin test\n再把工作从test分支下切换到main下git checkout main\n重新拉取主分支项目（防止别人已经提交了文件，此时你提交会覆盖别人提交的内容）git pull origin main \n将test分支合并到main上git merge test\n\n产生冲突\n查看产生冲突文件git diff\n查看分支中内容提交的状态git status\n把修改的内容提交到主分支上git push origin main\n\n若提交出现问题\n撤销合并恢复到以前状态git reset --hard HEAD\n撤销远程分支git reset --hard ORIG_HEAD\n\n删除分支\n删除本地分支git branch -d [branch name]\n删除远程分支git push origin :[branch name]\nPS: 删除主分支。思路：创建一个新分支，然后去官网设置新分支为主分支，然后再删除远程原主分支。\n\n重命名分支\n重命名本地分支git branch -m test newTest\n删除远程对应的旧分支git push origin --delete test\n将本地的新分支推送到远程git push -u origin newTest\n\n","tags":["GitHub"]},{"title":"mac解决“RDM.app”已损坏，无法打开。","url":"/2023/01/16/mac%E8%A7%A3%E5%86%B3%E2%80%9CRDM-app%E2%80%9D%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E3%80%82/","content":"问题例如\n解决问题\n终端输入\nsudo xattr -r -d com.apple.quarantine\n\n后面+ APP路径，例如：\nsudo xattr -r -d com.apple.quarantine /Applications/PicGo.app\n\n","tags":["Mac"]},{"title":"mac使用brew","url":"/2023/02/06/mac%E4%BD%BF%E7%94%A8brew/","content":"安装brew官方地址、中科大镜像源 。\nPS:荐于国内的速度，推荐大家使用中科大源。\n/bin/bash -c &quot;$(curl -fsSL https://cdn.jsdelivr.net/gh/Homebrew/install@HEAD/install.sh)&quot;\n卸载brew/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)&quot;\n\n\n使用教程\n安装软件brew install\n卸载软件brew uninstall\n搜索软件brew search\n列出已安装的软件brew list\n更新brewbrew update\n卸载软件brew uninstall\n用浏览器打开brew的官方网站brew home\n显示软件信息brew info\n显示包依赖brew deps\n安装桌面软件brew install --cask firefox \n保存配置文件source .zprofile\n取消ssh缓存rm -rf ~/.ssh/known_hosts \n\n","tags":["Mac"]},{"title":"office免费激活","url":"/2022/12/18/office%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB/","content":"激活Windows中的Office LTSC 专业增强版\n首先进入Office Tool Plus，然后下载如下图所示：然后解压进去点击可执行应用程序直接安装，如下图所示：\n\n若之前有word之类的。需要先卸载之前版本之后。再执行如上操作。卸载完成后，执行如下操作。\n\n此时word应该安装成功。然后激活它。  第三步的KMS主机地址，可以在这里查询。\n\n最后进入软件，查看是否激活。\n\n\n","tags":["office","Windows"]},{"title":"vue+axios请求实现下载功能","url":"/2022/12/25/vue-axios%E5%AE%9E%E7%8E%B0%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/","content":"实验环境版本为：“vue”: “^2.6.14”,“axios”: “^1.2.1”,“element-ui”: “^2.4.5”,\n具体代码\nUI界面，具体代码参考GitHub,若对您有帮助，还希望您点一个Star。&lt;el-button    size=&quot;mini&quot;    type=&quot;success&quot; plain    @click=&quot;downloadFile(scope.$index, scope.row)&quot;&gt;下载&lt;/el-button&gt;\njs逻辑downloadFile(index,row)&#123;  axios.get(&#x27;/api/download&#x27;,&#123;    params: &#123;    // 请求参数拼接在url上      fileName: row.fileName    &#125;,responseType: &quot;blob&quot;  &#125;).then(res=&gt;&#123;    const type = String(row.fileName.split(&#x27;.&#x27;).slice(-1));    let blob = new Blob([res.data], &#123;      type: type //这里需要根据不同的文件格式写不同的参数,例如：.mp3、.mp4    &#125;);    let eLink = document.createElement(&quot;a&quot;);    eLink.download = row.fileName; //这里需要自己给下载的文件命名    eLink.style.display = &quot;none&quot;;    eLink.href = URL.createObjectURL(blob);    document.body.appendChild(eLink);    eLink.click();    URL.revokeObjectURL(eLink.href);    document.body.removeChild(eLink);  &#125;)&#125;,\nSpringBoot 后端接口,整合minio，具体代码参考GitHub,若对您有帮助，还希望您点一个Star。   /** * 下载文件 serverImpl层 * * @param fileName 文件名 */@Overridepublic R download( HttpServletResponse response, String fileName) &#123;    // get object given the bucket and object name    try (InputStream stream = minioClient.getObject(            GetObjectArgs.builder()                    .bucket(bucket)                    .object(fileName)                    .build())) &#123;        // Read data from stream        //浏览器指定下载类型        response.setHeader(&quot;content-disposition&quot;,&quot;attachment;filename=&quot;+ URLEncoder.encode(fileName,&quot;UTF-8&quot;));        //下载文件        IOUtils.copy(stream, response.getOutputStream());    &#125;catch (MinioException | InvalidKeyException | IOException | NoSuchAlgorithmException e)&#123;        log.error(e.getMessage());        return R.error().message(&quot;下载失败&quot;);    &#125;    return R.success().message(&quot;下载成功&quot;);&#125;\n /** * 下载文件 server * @param fileName 文件名 */R download(HttpServletResponse response, String fileName);\n /** * 下载文件 controller层 * @param fileName 文件名 */@GetMapping(&quot;/download&quot;)public R download(HttpServletResponse response,String fileName)&#123;    return R.success().map(&quot;data&quot;,fileService.download(response,fileName));&#125; \n\n","tags":["vue","SpringBoot"]},{"title":"什么是DevOps？","url":"/2023/03/19/%E4%BB%80%E4%B9%88%E6%98%AFDevOps%EF%BC%9F/","content":"DevOps 是一种将软件开发（Dev）和 IT 运营（Ops）结合起来的一种文化、实践和方法论。它强调在软件开发和运维的全生命周期中，团队应该紧密协作，以便更快、更频繁地交付高质量的软件。\n在 DevOps 中，开发和运维的团队不再是两个独立的实体，而是通过自动化、协作和共享知识来实现更好的沟通和协作。这种协作可以帮助团队更快地检测和解决问题，并缩短交付时间。\nDevOps 将持续集成（Continuous Integration）、持续交付（Continuous Delivery）和持续部署（Continuous Deployment）等自动化工具和流程与敏捷开发方法相结合，以实现更快的迭代和更频繁的软件交付。这样可以让团队更快地响应市场需求和变化，并提供更好的用户体验。\n总的来说，DevOps 是一种以协作、自动化和敏捷为核心的软件开发和运维方法，可以帮助团队更快、更高效地交付软件，并提高软件的质量和可靠性。\n","tags":["DevOps"]},{"title":"处理远程ssh链接时候出现的WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED警告","url":"/2022/12/16/%E5%A4%84%E7%90%86%E8%BF%9C%E7%A8%8Bssh%E9%93%BE%E6%8E%A5%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E7%9A%84WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED%E8%AD%A6%E5%91%8A/","content":"若远程连接ssh时出现如下图所示：解决方法：\nssh-keygen -R ip地址","tags":["Linux"]},{"title":"使用KMS激活Windows","url":"/2022/12/18/%E4%BD%BF%E7%94%A8KMS%E6%BF%80%E6%B4%BBWindows/","content":"纯净无广告激活Windows，GitHub已经开源，请访问 即可。\n首先进入官网 ,下载。\n进入软件，按下图操作即可激活。PS: 若没激活可以多试几次。\n进入我的电脑，直接查看是否激活。\n\n","tags":["Windows"]},{"title":"华为服务器Rh1288hv3自定义风扇转速","url":"/2023/02/02/%E5%8D%8E%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8Rh1288hv3%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F/","content":"查询当前风扇工作模式\nipmcget -d faninfo\n\n更改自动为手动\nipmcset -d fanmode -v 1 100000000\n\n更改风扇转速根据自己业务量修改 -v后跟参数20-100\nipmcset -d fanlevel -v 30\n","tags":["Linux"]},{"title":"总之岁月漫长，然而值得等待。","url":"/2023/01/06/%E6%80%BB%E4%B9%8B%E5%B2%81%E6%9C%88%E6%BC%AB%E9%95%BF%EF%BC%8C%E7%84%B6%E8%80%8C%E5%80%BC%E5%BE%97%E7%AD%89%E5%BE%85/","content":"搭建原因Hexo可以将博客内容托管于Github上，从而不需要自己购买服务器和域名，也不用因为某次更换域名而导致原地址不能访问，也不会造成内容数据丢失。\n由于Hexo是静态页面，加载速度较快，所以使用 Hexo 的人也比较多，主题，插件什么的都比较丰富。\n搭建教程参考教程 、官方教程 、Markdown 语法\n主题选择目前主题 、技术文档 、评论系统 、Hexo官网 、 官方主题\n","tags":["博客","hexo"]},{"title":"安装宝塔面板","url":"/2022/12/11/%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/","content":"一键安装脚本，过期可查看官网，下滑页面即可查询最新命令if [ -f /usr/bin/curl ];then curl -sSO https://download.bt.cn/install/install_panel.sh;else wget -O install_panel.sh https://download.bt.cn/install/install_panel.sh;fi;bash install_panel.sh ed8484bec","tags":["Linux","宝塔面板"]},{"title":"搭建青龙面板","url":"/2023/02/15/%E6%90%AD%E5%BB%BA%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/","content":"搭建原因\n由于某次的一次家里断电，导致自己的青龙面板的数据全丢，于是，出一个一件备份青龙面板、以及搭建的教程\n\n环境准备\ncentos7 系统\ndocker 与docker-compose环境 ，不会搭建的可以参考 。\n\n开始安装\n创建文件夹mkdir -p /home/docker/qinglong\n复制一键安装命令wget https://link.storjshare.io/jv2ouxh3tb6cyyoekhngmw6oe7na/data%2Fdev%2Fdocker%2Fqinglong%2Fdocker-compose.yml?download=1 -O docker-compose.yml\n开始安装docker-compose up -d\n检查是否安装成功docker ps -a\n \n\n备份文件\n这两文件可以保存至远程服务器。以免本地服务器开不了机造成损失。\n\n恢复文件原服务器能开机时\n删除原有容器docker rm -f 容器id\n\n容器id查询，一定要输入对，否则误删容器会造成其它容器数据丢失docker ps -a\n   \n容器id查询，一定要输入对，否则误删容器会造成其它容器数据丢失   docker rm -f 331cdec95e75\n\n\n\n进入之前安装青龙的目录\n执行命令docker-compose up -d\n执行完成后，等待一会儿，再重启服务。docker-compose restart\n之前所有数据即可恢复\n\n原服务器不能开机时\n将之前备份的目录传入新服务器\n然后参考原服务器能开机时的操作2。点击跳转\n\nCookie获取\n点击 此处登录\n按F12,切换手机显示\n登录成功后，点击网络，输入LoginRedirect,然后直接复制所有cookie的值即可。\n\n添加进面板\n名称必须是JD_COOKIE\n值为刚获取的cookie\n\n","tags":["docker","青龙面板"]},{"title":"用rsync给你的服务器备份吧~","url":"/2022/12/15/%E7%94%A8rsync%E7%BB%99%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%87%E4%BB%BD%E5%90%A7/","content":"引言：使用rsync可以使两台及以上服务器互相备份，一台当主服务器一台当备份服务器来确保服务器数据安全。\n优点：\n\n两台服务器不限内外网环境。\n可以指定备份服务器的IP地址\n可以设置密码，防止第三方盗取备份数据。\n\n实验环境本人一台本地服务器（centos），和一台本地存储服务器（TrueNAS）\n要备份的服务器(主服务器)\n安装rsync yum -y install rsync cd /etc\n进入etc目录找到rsyncd.conf ，说明rsync安装成功。\n编辑rsyncd.conf文件 vim rsyncd.conf\n #名称随意[centos]# 要备份的目录path = /home/list = yesread only = noignore errors#连接用户auth users = rootuid = rootgid = root#链接密码secrets file = /etc/rsyncd.secre#运行共享的IP，也支持IP网段。例如：192.168.98.0/24hosts allow = 192.168.100.1\n :wq!\n配置passwordcd /etctouch rsyncd.secrevim rsyncd.secre \n root:12345678\n配置权限chmod 600 /etc/rsyncd.secre\n配置开机启动systemctl start rsyncd #启动rsync服务systemctl enable rsyncd #将rsync服务 加入开机自启systemctl restart rsyncd #重启服务\n放通端口sudo firewall-cmd --add-port=873/tcp --permanentsudo firewall-cmd --reloadsudo firewall-cmd --list-all\n禁用selinux的安全增强\n临时禁用 setenforce 0\n永久关闭vim /etc/selinux/config将SELINUX=enforcing 改为SELINUX=disabled\n改完如下图所示：\n最后重启主机  reboot\n\n\n\n存储服务器（从服务器）\n从存储服务器测试rsync root@192.168.100.175::centos\nPS：命令说明，root是上面所指定的用户名，IP是你需要备份的IP，最后的名称是你自定义的名称，最后说明一点需要将存储服务器IP设为：192.168.100.1与上面指定服务器一样，网段也同理。\nTrueNAS 拉取并备份然后添加任务即可。PS：至于要备份到其它服务器可以参考知名up主 司波图youtubebilibili\n\n","tags":["centos"]},{"title":"如何让.gitignore文件立即生效","url":"/2023/03/13/%E5%A6%82%E4%BD%95%E8%AE%A9-gitignore%E6%96%87%E4%BB%B6%E7%AB%8B%E5%8D%B3%E7%94%9F%E6%95%88/","content":"\n先将当前仓库的文件的暂存区中剔除git rm -r --cached .\n再将所有的文件提交至暂存区   git add .\n\n","tags":["GitHub"]},{"title":"自写脚本，一键配置centos与docker环境。","url":"/2023/01/11/%E8%87%AA%E5%86%99%E8%84%9A%E6%9C%AC%EF%BC%8C%E4%B8%80%E9%94%AE%E9%85%8D%E7%BD%AEcentos%E4%B8%8Edocker%E7%8E%AF%E5%A2%83%E3%80%82/","content":"使用说明PS : 目前仅支持centos，若有帮助，欢迎到GitHub 点一个免费的Star。\n\n远程ssh连接云服务器\n ssh 用户名@ip\n\n安装git 。\nyum install -y git\n克隆仓库，国内请参考，国外请参考 。\n git clone https://github.com/bm4578/docker.gitcd docker\n运行脚本\n bash docker.sh \n\n\n若有问题及时联系。邮箱:&#x62;&#x6d;&#x74;&#x34;&#x35;&#x37;&#x38;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;\n\n\n","tags":["docker-compose","centos","docker"]},{"title":"解决向github提交代码每次都要求输入密码的问题","url":"/2022/12/10/%E8%A7%A3%E5%86%B3%E5%90%91github%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A6%81%E6%B1%82%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/","content":"\n终端输入 git config --global credential.helper store\nPS：逻辑是将第一次输入的密码存入.gitconfig文件之中，以后就再也不用提交时输入密码。\n\n","tags":["GitHub"]},{"title":"踩坑之SpringBoot整合redis存储验证码而抛出进制异常","url":"/2023/02/10/%E8%B8%A9%E5%9D%91%E4%B9%8BSpringBoot%E6%95%B4%E5%90%88redis%E5%AD%98%E5%82%A8%E9%AA%8C%E8%AF%81%E7%A0%81%E8%80%8C%E6%8A%9B%E5%87%BA%E8%BF%9B%E5%88%B6%E5%BC%82%E5%B8%B8/","content":"问题重现后端使用SpringBoot随机生成纯数字验证码，前端vue通过axios输入验证码，后端从redis中取出数据，明明验证码都一样，但是后端确会报以下错误：\nCould not read JSON: Invalid numeric value: Leading zeroes not allowed\n\n问题解决\n","tags":["SpringBoot"]},{"title":"Esxi系统下载","url":"/2023/03/23/Esxi%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%BD%BD/","content":"WebDev下载，参考地址丁辉博客 。\n","tags":["esxi"]},{"title":"iStoreOS删除自装插件","url":"/2023/03/24/iStoreOS%E5%88%A0%E9%99%A4%E8%87%AA%E8%A3%85%E6%8F%92%E4%BB%B6/","content":"\n进入终端\n进入插件目录cd /etc/istore/uci-defaults_bak/\n执行删除命令is-opkg remove &#x27;luci-app-passwall&#x27;\n 删除软件 luci-passwall \n\n补充自定义插件下载地址 。\n","tags":["openwrt"]},{"title":"CentOS搭建AdGguardHome服务器","url":"/2023/03/25/CentOS%E6%90%AD%E5%BB%BAAdGguardHome%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"安装教程\n下载服务器文件 ,最新版本可访问 。wget http://bm4578.eu.org:4005/d/AliCloud/%E6%8F%92%E4%BB%B6/AdGuardHome_linux_386.tar.gz\n解压文件   tar -zxvf tar -zxvf AdGuardHome_linux_386.tar.gz \n开始安装cd AdGuardHome./AdGuardHome -s install\n配置防火墙\n查看防火墙状态\n  systemctl status firewalld \n关闭防火墙\n systemctl stop firewalldsystemctl disable firewalld\n\n\n访问http://192.168.99.100:3000\n\n参考教程 @一瓶奶油youtube\nDNS 地址查询已知的 DNS 提供商\n","tags":["centos","DNS"]},{"title":"GitHub配置代理","url":"/2023/03/26/GitHub%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/","content":"注： 适用于Windows、Mac、Linux\n\n输入以下命令来设置HTTP代理：git config --global http.proxy http://127.0.0.1:7890\n\n\n说明：127.0.0.1 为本机地址，也可以是局域网内其他设备地址。\n代理端口 : \n\n\n如果您需要设置HTTPS代理，请输入以下命令：git config --global https.proxy http://127.0.0.1:7890\n验证是否生效git config --global --get http.proxy\ngit config --global --get https.proxy\n关闭代理git config --global --unset http.proxy\n git config --global --unset https.proxy\n\n","tags":["GitHub"]},{"title":"Centos7安装jenkins","url":"/2023/03/28/Centos7%E5%AE%89%E8%A3%85jenkins/","content":"安装流程\n添加Jenkins软件源：你可以通过运行以下命令将Jenkins软件源添加到系统中：\n sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo\n\n导入Jenkins密钥：使用以下命令导入Jenkins密钥：\n sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n开始安装\nsudo yum install jenkins -y\n启动jenkins\nsudo systemctl start jenkins\n  设置开机自启动sudo systemctl enable jenkins检查Jenkins服务的状态sudo systemctl status jenkins\n\n访问jenkins: 打开浏览器，访问http://your_server_ip_or_domain:8080\n\n\n","tags":["java","centos","jenkins"]},{"title":"Centos7设置yum为socks5代理","url":"/2023/03/28/Centos7%E8%AE%BE%E7%BD%AEyum%E4%B8%BAsocks5%E4%BB%A3%E7%90%86/","content":"前记： 由于国内原因导致下载jenkins等国外插件时，yum感人的速度，对此，可以设置socks5代理来解决。\n\n打开yum配置文件：使用以下命令打开yum配置文件：sudo vi /etc/yum.conf\n在文件末尾添加以下内容：proxy=http://your_proxy_address:proxy_port\n\n其中，your_proxy_address是你的代理服务器地址，proxy_port是代理服务器的端口号。如果你使用的是socks5代理，可以使用以下命令将其设置为socks5代理：  proxy=socks5://your_proxy_address:proxy_port\n\n\n保存并关闭文件：按下Esc键，然后输入:wq，保存并关闭文件。\n测试yum代理：使用以下命令测试yum代理是否生效：sudo yum update\n如果你的yum代理设置正确，你应该会看到软件包的下载速度明显加快。\n\n","tags":["centos"]}]