{"pages":[{"title":"Ubuntu22.04安装NVDIA显卡驱动","text":"实验环境 系统：Ubuntu 22.04 LTS，下载地址 显卡： Nvidia Tesla P4 具体步骤PS: 由于装上显卡，会导致进不去桌面，需要提前安装好ssh连接工具。 查询驱动 1ubuntu-drivers devices 安装驱动 1sudo apt-get install nvidia-driver-455 重启系统 1reboot 查看驱动 1234# 静态查询nvidia-smi# 动态查询watch -n 1 nvidia-smi","link":"/Ubuntu22-04%E5%AE%89%E8%A3%85NVDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8.html"},{"title":"记录学习，并非教程！希望你自己拥有实践精神。","text":"","link":"/about/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Hexo博客搭建","text":"##初衷：搭建博客的目的是为了记录学习，因为之前的一次失误导致了本可以记录电脑的重要笔记都丢失了。##结果：选择了Hexo博客，主题选择了Anatolo，也可以去主题仓库 ，自行选择。 搭建Hexo： 首先安装node.js、npm ，并配置环境变量。若出现如下图所示，即可成功。 进入Hexo，依次终端输入 12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 点击访问，若能成功，则搭建成功。若中途报错，建议更换网络或者配置国内源。 123# 配置腾讯源npm config set registry http://mirrors.cloud.tencent.com/npm/npm config get registry 123# 配置淘宝源npm config set registry https://registry.npmmirror.comnpm config get registry PS:若还报错建议安装 cnpm,然后使用cnpm 代替上面的npm安装命令。eg: cnpm install xxx 1npm install -g cnpm --registry=https://registry.npmmirror.com 配置主题Anatolo 进入Anatolo，然后进入终端：12git clone https://gitee.com/Lhcfl/hexo-theme-anatolo.git themes/Anatolo#或者直接下载主题zip包解压至主题目录下，重命名为Anatolo 安装依赖12npm install hexo-renderer-pug --savenpm install hexo-renderer-stylus --save 修改配置123456cd blog/themes/Anatolo/mv _config.example.yml _config.ymlcd /blogvim _config.yml#搜索替换以下内容theme: Anatolo 更新1git pull origin master 5.具体主题配置可参考官网 发布GitHub可参考CodeSheep原因是可以无服务器搭建，又能享有GitHub的永久存储。 youtube bilibili","link":"/2022/12/10/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"title":"Mac系统启动U盘制作","text":"Mojave系统 启动u盘制作 设置u盘名字为：Mojave（统一一下，为了后续shell不出错。） 下载官方原版ISO镜像，这里提供三个（推荐下载Mojave，新系统安装完成后，可升级其它系统）。mojavecatalinabig-sur 进入Mac终端输入： 1sudo /Applications/Install\\ macOS\\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/Mojave /Applications/Install\\ macOS\\ Mojave.app --nointeraction 开机按option 然后进入u盘系统，然后即可重装系统","link":"/2022/12/14/Mac%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8U%E7%9B%98%E5%88%B6%E4%BD%9C/"},{"title":"Ubuntu22-04基本设置","text":"准备工作 系统Ubuntu 22.04 LTS下载。 系统安装 进入系统，按回车即可. 前置操作，很重要，直接会影响后续是否成功安装。 经过漫长等待，终于进入系统，然后入下图所示退出安装 修改分辨率，否则会出现显示不全等现象。 最后重新进入安装系统。 正式开始安装 + 国内由于种种原因，下载直接跳过。 + 重新启动,按回车即可进入系统。 网络配置 配置国内镜像源 安装基础软件 安装ssh工具1sudo apt-get install openssh-server -y 测试： 更新软件源，查看网络配置是否成功。1sudo apt-get update -y 列出可更新的软件1sudo apt list --upgradable -y 更新升级所有软件1sudo apt-get upgrade -y 安装较新的安装包。1sudo apt-get dist-upgrade -y","link":"/2023/01/03/Ubuntu22-04%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"},{"title":"centos开启BBR加速","text":"前提条件，你服务器可以魔法上网。引言：开启BBR加速，给你的服务器换一个心脏 安装基本软件1yum install -y wget curl 下载一键脚本 12345wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;chmod +x tcp.sh./tcp.sh 安装完成执行脚本，如下图所示： 具体安装说明可以参考这里，我的是先安装了2、然后7、最后10（仅供参考）","link":"/2022/12/14/centos%E5%BC%80%E5%90%AFBBR%E5%8A%A0%E9%80%9F/"},{"title":"centos系统基本设置","text":"系统基础设置 配置阿里云镜像 1curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 更新缓存1yum makecache 安装epel源 1yum -y install epel-release 更新并升级yum1yum update -y 安装基础软件 1yum install -y wget vim net-tools bash-completion 安装docker与docker-compose 参考菜鸟教程 docker 安装 使用国内高速镜像安装 1curl -sSL https://get.daocloud.io/docker | sh 测试是否安装成功 1docker -v 启动docker 1systemctl start docker 设置开机启动docker 1systemctl enable docker 重启docker 1systemctl restart docker compose 安装 运行以下命令以下载 Docker Compose 的当前稳定版本： 1sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose 应用可执行权限 1sudo chmod +x /usr/local/bin/docker-compose 创建软链 1sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 测试是否成功 1docker-compose version 配置国内镜像源 点阿里云镜像源进去之后登陆，即可获取自己的镜像源，也可以使用我的，直接粘进系统即可食用。 12345678sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{ &quot;registry-mirrors&quot;: [&quot;https://cp250x9p.mirror.aliyuncs.com&quot;]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker 配置防火墙 查看防火墙状态 1systemctl status firewalld 开启防火墙 1systemctl start firewalld 关闭防火墙(临时） 1systemctl stop firewalld 永久关闭防火墙 1systemctl disable firewalld 重启防火墙1service firewalld restart 放通某一端口 1firewall-cmd --zone=public --add-port=80/tcp --permanent 放通某一段端口 1firewall-cmd --zone=public --add-port=4400-4600/tcp --permanent 关闭某一端口 1firewall-cmd --zone=public --remove-port=80/tcp --permanent 关闭某一段端口 1firewall-cmd --zone=public --remove-port=80-8000/tcp --permanent 查看端口列表1firewall-cmd --permanent --list-port 宝塔安装请参考之前文章写的，点击这里 即可跳转。","link":"/2022/12/11/centos%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"},{"title":"docker-compose安装常用服务","text":"PS: 安装docker与docker-compose，请点击查看我之前写的文章。 安装mysql8.0.27 创建文件夹 1mkdir mysql 创建dock er-compose文件 12touch docker-compose.ymlvim docker-compose.yml 编写docker-compose.yml 12345678910111213141516171819version: '3'services: mysql_8.0.27: #构建mysql镜像 image: mysql:8.0.27 container_name: mysql_8.0.27 # 容器名# command: --default-authentication-plugin=mysql_native_password restart: always environment: MYSQL_ROOT_PASSWORD: 123456 #root管理员用户密码# MYSQL_USER: test #创建test用户# MYSQL_PASSWORD: test #设置test用户的密码 ports: - '3306:3306' #host物理直接映射端口为3306 volumes: #mysql数据库挂载到host物理机目录 - ./data/db:/var/lib/mysql #容器的配置目录挂载到host物理机目录 - ./data/conf:/etc/mysql/conf.d 运行docker-compose 1docker-compose up -d 安装mysql5.7 创建文件夹 1mkdir mysql_5.7 创建dock er-compose文件 12touch docker-compose.ymlvim docker-compose.yml 编写docker-compose.yml 12345678910111213141516171819version: '3'services: mysql_5.7: #构建mysql镜像 image: mysql:5.7 container_name: mysql_5.7 # 容器名# command: --default-authentication-plugin=mysql_native_password restart: always environment: MYSQL_ROOT_PASSWORD: 123456 #root管理员用户密码# MYSQL_USER: test #创建test用户# MYSQL_PASSWORD: test #设置test用户的密码 ports: - '13306:3306' #host物理直接映射端口为13306 volumes: #mysql数据库挂载到host物理机目录 - ./data/db:/var/lib/mysql #容器的配置目录挂载到host物理机目录 - ./data/conf:/etc/mysql/conf.d 运行docker-compose 1docker-compose up -d 安装redis 创建文件夹 1mkdir redis 创建dock er-compose文件 12touch docker-compose.ymlvim docker-compose.yml 编写docker-compose.yml 123456789101112131415version: '3'services: redis: image: redis:latest container_name: redis restart: always privileged: true volumes: - ./data:/data - ./redis.conf:/usr/local/etc/redis/redis.conf - ./logs:/logs command: /bin/bash -c &quot;redis-server /usr/local/etc/redis/redis.conf&quot; ports: - &quot;6379:6379&quot; 编写redis配置文件 12touch redis.confvim redis.conf 123456789101112131415161718192021222324252627282930daemonize nopidfile /var/run/redis.pidport 6379timeout 0loglevel verboselogfile /logs/redis.logdatabases 110save 900 1save 300 10save 60 10000rdbcompression yesdbfilename dump.rdbdir ./slave-serve-stale-data yes#配置密码requirepass 12345678appendonly yesappendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mbslowlog-log-slower-than 10000slowlog-max-len 1024list-max-ziplist-entries 512list-max-ziplist-value 64set-max-intset-entries 512zset-max-ziplist-entries 128zset-max-ziplist-value 64activerehashing yes 运行docker-compose 1docker-compose up -d","link":"/2022/12/12/docker-compose%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1/"},{"title":"docker搭建Halo博客","text":"系统选择了centos，系统搭建和docker安装参考前面那篇文章。首先进入Halo官网，为什么我选这个版本呢？其一我看了官网文档，这个版本易于Halo2.0升级。其二1.X的主题特别多。 Halo+H2数据库搭建 进入任意文件夹 1234mkdir Halo cd Halotouch ocker-compose.yamlvim docker-compose.yaml 编辑docker-compose.yaml文件 12345678910111213141516171819version: &quot;3&quot;services: halo: image: halohub/halo:1.6.0 container_name: halo restart: on-failure:3 volumes: - ./:/root/.halo ports: - &quot;8090:8090&quot; environment: - SERVER_PORT=8090 - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.h2.Driver - SPRING_DATASOURCE_URL=jdbc:h2:file:~/.halo/db/halo - SPRING_DATASOURCE_USERNAME=admin # 数据库用户名 - SPRING_DATASOURCE_PASSWORD=o#DwN&amp;JSa56 #数据库密码 - HALO_ADMIN_PATH=admin #博客管理后台登陆账号 - HALO_CACHE=memory # 博客管理后台登陆密码 启动项目 1docker-compose up -d Halo+mysql数据库搭建 进入任意文件夹 1234mkdir Halo cd Halotouch ocker-compose.yamlvim docker-compose.yaml 编辑docker-compose.yaml文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647version: &quot;3&quot;services: halo_server: image: halohub/halo:1.6.0 container_name: halo_server restart: on-failure:3 depends_on: - halo_mysql networks: halo_network: volumes: - ./:/root/.halo ports: - &quot;8090:8090&quot; environment: - SERVER_PORT=8090 - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver - SPRING_DATASOURCE_URL=jdbc:mysql://halo_mysql:3306/halodb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true - SPRING_DATASOURCE_USERNAME=root # 数据库用户名 - SPRING_DATASOURCE_PASSWORD=o#DwN&amp;JSa56 # 数据库密码 - HALO_ADMIN_PATH=admin # 博客管理后台用户名 - HALO_CACHE=memory #博客管理后台密码 halo_mysql: image: mysql:8.0.27 container_name: halo_mysql restart: on-failure:3 networks: halo_network: command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true volumes: - /etc/localtime:/etc/localtime:ro - ./mysql:/var/lib/mysql - ./mysqlBackup:/data/mysqlBackup ports: - &quot;3306:3306&quot; environment: # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_DATASOURCE_PASSWORD 变量值 - MYSQL_ROOT_PASSWORD=o#DwN&amp;JSa56 # 数据库密码 - MYSQL_DATABASE=halodbnetworks: halo_network: 启动项目 1docker-compose up -d Halo+mysql+redis搭建 进入任意文件夹 1234mkdir Halo cd Halotouch ocker-compose.yamlvim docker-compose.yaml 编辑docker-compose.yaml文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465version: &quot;3&quot;services: halo_server: image: halohub/halo:1.6.0 container_name: halo_server restart: on-failure:3 depends_on: - halo_mysql - halo_redis networks: halo_network: volumes: - ./:/root/.halo ports: - &quot;8090:8090&quot; environment: - SERVER_PORT=8090 - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver - SPRING_DATASOURCE_URL=jdbc:mysql://halo_mysql:3306/halodb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true - SPRING_DATASOURCE_USERNAME=root - SPRING_DATASOURCE_PASSWORD=o#DwN&amp;JSa56 #mysql密码 - HALO_ADMIN_PATH=admin #后台用户 - HALO_CACHE=redis #后台密码 - SPRING_REDIS_PORT=6379 - SPRING_REDIS_DATABASE=0 - SPRING_REDIS_HOST=halo_redis - SPRING_REDIS_PASSWORD=dm5fD%rvPtq #redis密码 halo_mysql: image: mysql:8.0.27 container_name: halo_mysql restart: on-failure:3 networks: halo_network: command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true volumes: - /etc/localtime:/etc/localtime:ro - ./mysql:/var/lib/mysql - ./mysqlBackup:/data/mysqlBackup ports: - &quot;3306:3306&quot; environment: # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_DATASOURCE_PASSWORD 变量值 - MYSQL_ROOT_PASSWORD=o#DwN&amp;JSa56 - MYSQL_DATABASE=halodb halo_redis: image: redis container_name: halo_redis restart: on-failure:3 networks: halo_network: volumes: - ./redis/data:/data - ./redis/logs:/logs # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_REDIS_PASSWORD 变量值 command: redis-server --requirepass dm5fD%rvPtq ports: - &quot;6379:6379&quot;networks: halo_network: 启动项目 1docker-compose up -d 主题配置PS:可以直接去主题官网，里面都有很详细的配置。","link":"/2022/12/14/docker%E6%90%AD%E5%BB%BAHalo%E5%8D%9A%E5%AE%A2/"},{"title":"shell常用命令","text":"常用命令 历史记录1history 执行历史记录的某一条命令。12 # !+行号!350 变量与值之间不得有空格12# 单引号变量,不识别特殊语法，双引号变量识别特殊语法。name=&quot;ts&quot; 输出变量1echo $name 执行shell123456#使用bash/sh执行脚本，会开启子shell，不会保留变量信息。bash xxx.sh#使用source或者点符号，在当前shell加载脚本，会保留变量信息source xxx.sh./sh 历史记录1","link":"/2022/12/26/shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"docker开启远程访问","text":"docker version 20.10.21 开启远程访问，不可用于生产环境，只适用于内网部署项目。123vim /usr/lib/systemd/system/docker.serviceExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock 然后进入宝塔面板放通tcp/udp的2375端口 最后进入idea测试：","link":"/2022/12/13/docker%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"},{"title":"vue+axios请求实现下载功能","text":"版本为：“vue”: “^2.6.14”,“axios”: “^1.2.1”,“element-ui”: “^2.4.5”, UI界面，具体代码参考GitHub,若对您有帮助，还希望您点一个Star。12345&lt;el-button size=&quot;mini&quot; type=&quot;success&quot; plain @click=&quot;downloadFile(scope.$index, scope.row)&quot;&gt;下载&lt;/el-button&gt; js逻辑1234567891011121314151617181920downloadFile(index,row){ axios.get('/api/download',{ params: { // 请求参数拼接在url上 fileName: row.fileName },responseType: &quot;blob&quot; }).then(res=&gt;{ const type = String(row.fileName.split('.').slice(-1)); let blob = new Blob([res.data], { type: type //这里需要根据不同的文件格式写不同的参数,例如：.mp3、.mp4 }); let eLink = document.createElement(&quot;a&quot;); eLink.download = row.fileName; //这里需要自己给下载的文件命名 eLink.style.display = &quot;none&quot;; eLink.href = URL.createObjectURL(blob); document.body.appendChild(eLink); eLink.click(); URL.revokeObjectURL(eLink.href); document.body.removeChild(eLink); })}, SpringBoot 后端接口,整合minio，具体代码参考GitHub,若对您有帮助，还希望您点一个Star。123456789101112131415161718192021222324 /** * 下载文件 serverImpl层 * * @param fileName 文件名 */@Overridepublic R download( HttpServletResponse response, String fileName) { // get object given the bucket and object name try (InputStream stream = minioClient.getObject( GetObjectArgs.builder() .bucket(bucket) .object(fileName) .build())) { // Read data from stream //浏览器指定下载类型 response.setHeader(&quot;content-disposition&quot;,&quot;attachment;filename=&quot;+ URLEncoder.encode(fileName,&quot;UTF-8&quot;)); //下载文件 IOUtils.copy(stream, response.getOutputStream()); }catch (MinioException | InvalidKeyException | IOException | NoSuchAlgorithmException e){ log.error(e.getMessage()); return R.error().message(&quot;下载失败&quot;); } return R.success().message(&quot;下载成功&quot;);} 12345/** * 下载文件 server * @param fileName 文件名 */R download(HttpServletResponse response, String fileName); 12345678/** * 下载文件 controller层 * @param fileName 文件名 */@GetMapping(&quot;/download&quot;)public R download(HttpServletResponse response,String fileName){ return R.success().map(&quot;data&quot;,fileService.download(response,fileName));}","link":"/2022/12/25/vue-axios%E5%AE%9E%E7%8E%B0%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/"},{"title":"github基本操作","text":"初始化本地仓库为GitHub仓库 将这个文件夹变成Git可管理的仓库。 1git init 将这个目录下的所有文件添加到仓库 1git add . 提交说明 1git commit -m &quot;first commit&quot; 将本地仓库与GitHub上创建好的目标远程仓库进行关联。 1git remote add origin 远程仓库地址 创建主分支1git branch -M main 将主分支提交到远程1git push origin main 查看远程主分支1git branch -r 提交本地文件到GitHub 查看当前分支情况，*标识的是你当前所在的分支。 1git branch 将这个目录下的所有文件添加到仓库 1git add . 提交说明 1git commit -m &quot;first commit&quot; 提交到远程分支1git push origin main 创建分支 查看当前分支情况，*标识的是你当前所在的分支。 1git branch 查看远程分支 1git branch -r 查看所有分支 1git branch -a 新建一个分支test 1git branch test 切换到新建的分支test1git checkout test 创建加切换分支 1git checkout -b [branch name] 将新建分支test推送到GitHub上 1git push origin test 合并分支 查看当前分支情况，*标识的是你当前所在的分支。 1git branch 切换分支到test（需要合并的分支）1git checkout test 提交这个目录下的所有文件1git add . 12# 提交指定文件git add test.txt 提交说明信息1git commit -m &quot;备注&quot; 提交到test分支 1git push origin test 再把工作从test分支下切换到main下1git checkout main 重新拉取主分支项目（防止别人已经提交了文件，此时你提交会覆盖别人提交的内容）1git pull origin main 将test分支合并到main上1git merge test 产生冲突 查看产生冲突文件1git diff 查看分支中内容提交的状态1git status 把修改的内容提交到主分支上1git push origin main 若提交出现问题 撤销合并恢复到以前状态1git reset --hard HEAD 撤销远程分支1git reset --hard ORIG_HEAD 删除分支 删除本地分支1git branch -d [branch name] 删除远程分支1git push origin :[branch name] PS: 删除主分支。思路：创建一个新分支，然后去官网设置新分支为主分支，然后再删除远程原主分支。 重命名分支 重命名本地分支1git branch -m test newTest 删除远程对应的旧分支1git push origin --delete test 将本地的新分支推送到远程1git push -u origin newTest","link":"/2022/12/16/github%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"},{"title":"office免费激活","text":"激活Windows中的Office LTSC 专业增强版 首先进入Office Tool Plus，然后下载如下图所示：然后解压进去点击可执行应用程序直接安装，如下图所示： 若之前有word之类的。需要先卸载之前版本之后。再执行如上操作。卸载完成后，执行如下操作。 此时word应该安装成功。然后激活它。 第三步的KMS主机地址，可以在这里查询。 最后进入软件，查看是否激活。","link":"/2022/12/18/office%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB/"},{"title":"使用KMS激活Windows","text":"纯净无广告激活Windows，GitHub已经开源，请访问 即可。 首先进入官网 ,下载。 进入软件，按下图操作即可激活。PS: 若没激活可以多试几次。 进入我的电脑，直接查看是否激活。","link":"/2022/12/18/%E4%BD%BF%E7%94%A8KMS%E6%BF%80%E6%B4%BBWindows/"},{"title":"处理远程ssh链接时候出现的WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED警告","text":"若远程连接ssh时出现如下图所示：解决方法： 1ssh-keygen -R ip地址","link":"/2022/12/16/%E5%A4%84%E7%90%86%E8%BF%9C%E7%A8%8Bssh%E9%93%BE%E6%8E%A5%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E7%9A%84WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED%E8%AD%A6%E5%91%8A/"},{"title":"安装宝塔面板","text":"一键安装脚本，过期可查看官网，下滑页面即可查询最新命令1if [ -f /usr/bin/curl ];then curl -sSO https://download.bt.cn/install/install_panel.sh;else wget -O install_panel.sh https://download.bt.cn/install/install_panel.sh;fi;bash install_panel.sh ed8484bec","link":"/2022/12/11/%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"},{"title":"用rsync给你的服务器备份吧~","text":"引言：使用rsync可以使两台及以上服务器互相备份，一台当主服务器一台当备份服务器来确保服务器数据安全。 优点： 两台服务器不限内外网环境。 可以指定备份服务器的IP地址 可以设置密码，防止第三方盗取备份数据。 实验环境本人一台本地服务器（centos），和一台本地存储服务器（TrueNAS） 要备份的服务器(主服务器) 安装rsync 12yum -y install rsync cd /etc 进入etc目录找到rsyncd.conf ，说明rsync安装成功。 编辑rsyncd.conf文件 1vim rsyncd.conf 123456789101112131415#名称随意[centos]# 要备份的目录path = /home/list = yesread only = noignore errors#连接用户auth users = rootuid = rootgid = root#链接密码secrets file = /etc/rsyncd.secre#运行共享的IP，也支持IP网段。例如：192.168.98.0/24hosts allow = 192.168.100.1 1:wq! 配置password123cd /etctouch rsyncd.secrevim rsyncd.secre 1root:12345678 配置权限1chmod 600 /etc/rsyncd.secre 配置开机启动123systemctl start rsyncd #启动rsync服务systemctl enable rsyncd #将rsync服务 加入开机自启systemctl restart rsyncd #重启服务 放通端口123sudo firewall-cmd --add-port=873/tcp --permanentsudo firewall-cmd --reloadsudo firewall-cmd --list-all 禁用selinux的安全增强 临时禁用 1setenforce 0 永久关闭123vim /etc/selinux/config将SELINUX=enforcing 改为SELINUX=disabled 改完如下图所示： 最后重启主机 1reboot 存储服务器（从服务器） 从存储服务器测试1rsync root@192.168.100.175::centos PS：命令说明，root是上面所指定的用户名，IP是你需要备份的IP，最后的名称是你自定义的名称，最后说明一点需要将存储服务器IP设为：192.168.100.1与上面指定服务器一样，网段也同理。 TrueNAS 拉取并备份然后添加任务即可。PS：至于要备份到其它服务器可以参考知名up主 司波图youtubebilibili","link":"/2022/12/15/%E7%94%A8rsync%E7%BB%99%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%87%E4%BB%BD%E5%90%A7/"},{"title":"解决向github提交代码每次都要求输入密码的问题","text":"终端输入 1git config --global credential.helper store PS：逻辑是将第一次输入的密码存入.gitconfig文件之中，以后就再也不用提交时输入密码。","link":"/2022/12/10/%E8%A7%A3%E5%86%B3%E5%90%91github%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A6%81%E6%B1%82%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"防火墙","slug":"防火墙","link":"/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"Shell","slug":"Shell","link":"/tags/Shell/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"SpringBoot","slug":"SpringBoot","link":"/tags/SpringBoot/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"office","slug":"office","link":"/tags/office/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"宝塔面板","slug":"宝塔面板","link":"/tags/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"}],"categories":[]}