{"pages":[{"title":"记录学习，并非教程！希望你自己有实践精神。","text":"","link":"/about/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Hexo博客搭建","text":"##初衷：搭建博客的目的是为了记录学习，因为之前的一次失误导致了本可以记录电脑的重要笔记都丢失了。##结果：选择了Hexo博客，主题选择了Anatolo，也可以去主题仓库 ，自行选择。 搭建Hexo： 首先安装node.js、npm ，并配置环境变量。若出现如下图所示，即可成功。 进入Hexo，依次终端输入 12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 点击访问，若能成功，则搭建成功。若中途报错，建议更换网络或者配置国内源。 123# 配置腾讯源npm config set registry http://mirrors.cloud.tencent.com/npm/npm config get registry 123# 配置淘宝源npm config set registry https://registry.npmmirror.comnpm config get registry PS:若还报错建议安装 cnpm,然后使用cnpm 代替上面的npm安装命令。eg: cnpm install xxx 1npm install -g cnpm --registry=https://registry.npmmirror.com 配置主题Anatolo 进入Anatolo，然后进入终端：12git clone https://gitee.com/Lhcfl/hexo-theme-anatolo.git themes/Anatolo#或者直接下载主题zip包解压至主题目录下，重命名为Anatolo 安装依赖12npm install hexo-renderer-pug --savenpm install hexo-renderer-stylus --save 修改配置123456cd blog/themes/Anatolo/mv _config.example.yml _config.ymlcd /blogvim _config.yml#搜索替换以下内容theme: Anatolo 更新1git pull origin master 5.具体主题配置可参考官网 发布GitHub可参考CodeSheep原因是可以无服务器搭建，又能享有GitHub的永久存储。 youtube bilibili","link":"/2022/12/10/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"title":"centos系统基本设置","text":"系统基础设置 配置阿里云镜像 1curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 更新缓存 1yum makecache 安装epel源 1yum -y install epel-release 更新并升级yum 1yum update -y 安装基础软件1yum install -y wget vim net-tools bash-completion 安装docker与docker-compose 参考菜鸟教程 docker 安装 使用国内高速镜像安装 1curl -sSL https://get.daocloud.io/docker | sh 测试是否安装成功 1docker -v 启动docker1systemctl start docker 设置开机启动docker1systemctl enable docker compose 安装 运行以下命令以下载 Docker Compose 的当前稳定版本：12sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose 应用可执行权限1sudo chmod +x /usr/local/bin/docker-compose 创建软链1sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 测试是否成功1docker-compose version 配置国内镜像源点阿里云镜像源进去之后登陆，即可获取自己的镜像源，也可以使用我的，直接粘进系统即可食用。 12345678sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{ &quot;registry-mirrors&quot;: [&quot;https://cp250x9p.mirror.aliyuncs.com&quot;]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker 配置防火墙 查看防火墙状态1systemctl status firewalld 开启防火墙1systemctl start firewalld 关闭防火墙(临时）1systemctl stop firewalld 永久关闭防火墙1systemctl disable firewalld 重启防火墙1service firewalld restart 放通某一端口1firewall-cmd --zone=public --add-port=80/tcp --permanent 放通某一段端口1firewall-cmd --zone=public --add-port=4400-4600/tcp --permanent 关闭某一端口 1firewall-cmd --zone=public --remove-port=80/tcp --permanent 关闭某一段端口 1firewall-cmd --zone=public --remove-port=80-8000/tcp --permanent 查看端口列表1firewall-cmd --permanent --list-port 宝塔安装请参考之前文章写的，点击这里 即可跳转。","link":"/2022/12/11/centos%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"},{"title":"docker-compose安装常用服务","text":"PS: 安装docker与docker-compose，请点击查看我之前写的文章。 安装mysql8.0.27 创建文件夹 1mkdir mysql 创建dock er-compose文件12touch docker-compose.ymlvim docker-compose.yml 编写docker-compose.yml12345678910111213141516171819version: '3'services: mysql_8.0.27: #构建mysql镜像 image: mysql:8.0.27 container_name: mysql_8.0.27 # 容器名# command: --default-authentication-plugin=mysql_native_password restart: always environment: MYSQL_ROOT_PASSWORD: 123456 #root管理员用户密码# MYSQL_USER: test #创建test用户# MYSQL_PASSWORD: test #设置test用户的密码 ports: - '3306:3306' #host物理直接映射端口为3306 volumes: #mysql数据库挂载到host物理机目录 - ./data/db:/var/lib/mysql #容器的配置目录挂载到host物理机目录 - ./data/conf:/etc/mysql/conf.d 运行docker-compose1docker-compose up -d 安装mysql5.7 创建文件夹 1mkdir mysql_5.7 创建dock er-compose文件12touch docker-compose.ymlvim docker-compose.yml 编写docker-compose.yml12345678910111213141516171819version: '3'services: mysql_5.7: #构建mysql镜像 image: mysql:5.7 container_name: mysql_5.7 # 容器名# command: --default-authentication-plugin=mysql_native_password restart: always environment: MYSQL_ROOT_PASSWORD: 123456 #root管理员用户密码# MYSQL_USER: test #创建test用户# MYSQL_PASSWORD: test #设置test用户的密码 ports: - '13306:3306' #host物理直接映射端口为13306 volumes: #mysql数据库挂载到host物理机目录 - ./data/db:/var/lib/mysql #容器的配置目录挂载到host物理机目录 - ./data/conf:/etc/mysql/conf.d 运行docker-compose1docker-compose up -d 安装redis 创建文件夹 1mkdir redis 创建dock er-compose文件 12touch docker-compose.ymlvim docker-compose.yml 编写docker-compose.yml 123456789101112131415version: '3'services: redis: image: redis:latest container_name: redis restart: always privileged: true volumes: - ./data:/data - ./redis.conf:/usr/local/etc/redis/redis.conf - ./logs:/logs command: /bin/bash -c &quot;redis-server /usr/local/etc/redis/redis.conf&quot; ports: - &quot;6379:6379&quot; 编写redis配置文件 12touch redis.confvim redis.conf 123456789101112131415161718192021222324252627282930daemonize nopidfile /var/run/redis.pidport 6379timeout 0loglevel verboselogfile /logs/redis.logdatabases 110save 900 1save 300 10save 60 10000rdbcompression yesdbfilename dump.rdbdir ./slave-serve-stale-data yes#配置密码requirepass 12345678appendonly yesappendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mbslowlog-log-slower-than 10000slowlog-max-len 1024list-max-ziplist-entries 512list-max-ziplist-value 64set-max-intset-entries 512zset-max-ziplist-entries 128zset-max-ziplist-value 64activerehashing yes 运行docker-compose 1docker-compose up -d","link":"/2022/12/12/docker-compose%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1/"},{"title":"解决向github提交代码每次都要求输入密码的问题","text":"终端输入 1git config --global credential.helper store PS：逻辑是将第一次输入的密码存入.gitconfig文件之中，以后就再也不用提交时输入密码。","link":"/2022/12/10/%E8%A7%A3%E5%86%B3%E5%90%91github%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A6%81%E6%B1%82%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"安装宝塔面板","text":"一键安装脚本，过期可查看官网，下滑页面即可查询最新命令1if [ -f /usr/bin/curl ];then curl -sSO https://download.bt.cn/install/install_panel.sh;else wget -O install_panel.sh https://download.bt.cn/install/install_panel.sh;fi;bash install_panel.sh ed8484bec","link":"/2022/12/11/%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"centos","slug":"centos","link":"/tags/centos/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"防火墙","slug":"防火墙","link":"/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"宝塔面板","slug":"宝塔面板","link":"/tags/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"}],"categories":[]}